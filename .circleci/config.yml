version: 2.1
orbs:
  ruby: circleci/ruby@2.0.1

common-config: &common-config
  working_directory: ~/goggles_api
  shell: /bin/bash --login
  # NOTE: make sure ENV vars on CircleCI include CC_TEST_REPORTER_ID
  #       for CodeClimate test coverage upload!
  #       (Otherwise the 'upload-coverage' step will fail.)
  docker:
    - image: cimg/ruby:3.1.4-node
      environment:
        RAILS_ENV: test
        BUNDLE_JOBS: 2
        BUNDLE_RETRY: 2
        BUNDLE_PATH: vendor/bundle
        PAGER: cat
        GIT_LFS_SKIP_SMUDGE: 1
    - image: cimg/mariadb:10.6.12
      environment:
        DATABASE_NAME: goggles_test
        DATABASE_USER: root
        PAGER: cat

common-db-setup: &common-db-setup
  name: DB setup
  command: |
    sudo apt update
    sudo apt-get install mysql-client
    mkdir -p tmp ~/test-results ~/test-artifacts
    echo $RAILS_MASTER_KEY > config/master.key
    cp ./tmp/test.sql.bz2 db/dump/test.sql.bz2
    mv config/database_ci.yml config/database.yml
    dockerize -wait tcp://localhost:3306 -timeout 1m
    RAILS_ENV=test bin/rails db:rebuild from=test to=test
    RAILS_ENV=test bin/rails db:migrate
    ./tmp/cc-test-reporter before-build

jobs:
  persisted-data:
    <<: *common-config
    # parallelism: 1 (no actual need here)
    steps:
      - run:
          name:  Setup persisted data
          command: |
            mkdir -p tmp
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
            curl -L -o ./tmp/test.sql.bz2 "https://github.com/steveoro/goggles_db/raw/master/spec/dummy/db/dump/test.sql.bz2"
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
            - test.sql.bz2

  rubocop:
    <<: *common-config
    # parallelism: 1 (no actual need here)
    steps:
      - checkout
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - ruby/rubocop-check:
          app-dir: ~/goggles_api
          label: Rubocop
          format: pacman

  brakeman:
    <<: *common-config
    # parallelism: 1 (no actual need here)
    steps:
      - checkout
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          name: Brakeman
          command: |
            bundle exec brakeman -A6q -c .brakeman.cfg

  zeitwerk:
    <<: *common-config
    # parallelism: 1 (no actual need here)
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: Zeitwerk check
          command: |
            bundle exec rake zeitwerk:check


  rspec-A-F:
    <<: *common-config
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: RSpec - A..F
          command: |
            TEST_FILES=$(circleci tests glob "spec/**/a*_spec.rb,spec/**/b*_spec.rb,spec/**/c*_spec.rb,spec/**/f*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --color --order rand \
                        -f RspecJunitFormatter --out ~/test-results/rspec-a-f.xml \
                        -f doc -- ${TEST_FILES}
            ./tmp/cc-test-reporter format-coverage -t simplecov \
                                   -o "./tmp/codeclimate.rspec-a-f.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-artifacts
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.rspec-a-f.*.json


  rspec-I:
    <<: *common-config
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: RSpec - I
          command: |
            TEST_FILES=$(circleci tests glob "spec/**/i*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --color --order rand \
                        -f RspecJunitFormatter --out ~/test-results/rspec-i.xml \
                        -f doc -- ${TEST_FILES}
            ./tmp/cc-test-reporter format-coverage -t simplecov \
                                   -o "./tmp/codeclimate.rspec-i.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-artifacts
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.rspec-i.*.json


  rspec-L-M:
    <<: *common-config
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: RSpec - L..M
          command: |
            TEST_FILES=$(circleci tests glob "spec/**/l*_spec.rb,spec/**/m*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --color --order rand \
                        -f RspecJunitFormatter --out ~/test-results/rspec-l-m.xml \
                        -f doc -- ${TEST_FILES}
            ./tmp/cc-test-reporter format-coverage -t simplecov \
                                   -o "./tmp/codeclimate.rspec-l-m.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-artifacts
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.rspec-l-m.*.json


  rspec-S:
    <<: *common-config
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: RSpec - S
          command: |
            TEST_FILES=$(circleci tests glob "spec/**/s*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --color --order rand \
                        -f RspecJunitFormatter --out ~/test-results/rspec-s.xml \
                        -f doc -- ${TEST_FILES}
            ./tmp/cc-test-reporter format-coverage -t simplecov \
                                   -o "./tmp/codeclimate.rspec-s.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-artifacts
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.rspec-s.*.json


  rspec-T-U:
    <<: *common-config
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: ~/goggles_api/tmp
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - run:
          <<: *common-db-setup
      - run:
          name: RSpec - U
          command: |
            TEST_FILES=$(circleci tests glob "spec/**/t*_spec.rb,spec/**/u*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --color --order rand \
                        -f RspecJunitFormatter --out ~/test-results/rspec-t-u.xml \
                        -f doc -- ${TEST_FILES}
            ./tmp/cc-test-reporter format-coverage -t simplecov \
                                   -o "./tmp/codeclimate.rspec-t-u.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-artifacts
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.rspec-t-u.*.json


  upload-coverage:
    <<: *common-config
    # parallelism: 1 (no actual need here)
    steps:
      - attach_workspace:
          at: ~/goggles_api/tmp
      - run:
          name: CodeClimate upload
          command: |
            echo "*** Persisted contents: ***"
            ls -l ./tmp
            ./tmp/cc-test-reporter sum-coverage -o - tmp/codeclimate.*.json | ./tmp/cc-test-reporter upload-coverage --debug --input -


  docker-build:
    <<: *common-config
    steps:
      - checkout
      - ruby/install-deps:
          app-dir: ~/goggles_api
          key: goggles_api-v0600
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Docker TAGGED prod
                command: |
                  echo "Git Tag << pipeline.git.tag >>"
                  echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                  docker pull $DOCKERHUB_USERNAME/goggles-api:latest
                  docker build -t $DOCKERHUB_USERNAME/goggles-api:prod-<< pipeline.git.tag >> --cache-from=$DOCKERHUB_USERNAME/goggles-api:latest -f Dockerfile.prod .
                  docker push $DOCKERHUB_USERNAME/goggles-api:prod-<< pipeline.git.tag >>
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Docker LATEST staging
                command: |
                  echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                  docker pull $DOCKERHUB_USERNAME/goggles-api:latest
                  docker build -t $DOCKERHUB_USERNAME/goggles-api:latest --cache-from=$DOCKERHUB_USERNAME/goggles-api:latest -f Dockerfile.staging .
                  docker push $DOCKERHUB_USERNAME/goggles-api:latest


workflows:
  full-build:
    jobs:
      - persisted-data
      - brakeman:
          requires:
            - persisted-data
      - rubocop:
          requires:
            - persisted-data
      - zeitwerk:
          requires:
            - persisted-data

      - rspec-A-F:
          requires:
            - brakeman
            - rubocop
            - zeitwerk

      - rspec-I:
          requires:
            - brakeman
            - rubocop
            - zeitwerk

      - rspec-L-M:
          requires:
            - rspec-A-F
      - rspec-S:
          requires:
            - rspec-I
      - rspec-T-U:
          requires:
            - rspec-A-F

      - upload-coverage:
          requires:
            - rspec-L-M
            - rspec-S
            - rspec-T-U

      - docker-build:
          requires:
            - upload-coverage
