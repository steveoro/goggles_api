FORMAT: 1A
HOST: https://master-goggles.org

# Goggles 'core7' API
Backend internal API for the Goggles Engine, core7.

    | _Framework_ | _API_ | _App version_ | _DB structure_ | _latest update_ |
    | --- | --- | --- | --- | --- |
    | `core7` | `v3` | 7-0.5.01 | 1.98.0 | 20230404 |

_Previous legacy versions are deprecated and subseeded by this._


* * *


## API routes naming ("find" vs "search" vs "list")

"`find`" is used as a verb in API routes to discriminate requests that will yield a _single result_.

Conversely, "`search`" and "`list`" are used whenever the request supports multiple results, with the
difference being that "`list`" results are simple or filtered queries, whereas "`search`" implies always
some kind of special back-end strategy (fuzzy matching, neural networks, deep search, whatever the case).

For this reason, sometimes the "`search`" endpoints may result particularly slower when compared to the timing
required by a possibly similar "`list`" fetch. (But this comparison is not always possible.)

One exception to this naming scheme is the "`lookup`" group of endpoints, which is specifically chosen for
just looking up the read-only values of secondary subentities & lookup tables.

Typically, whenever an endpoint path includes the full name of a specific DB entity (as in `meeting_programs`
or `meeting_reservations`), the supported CRUD operations will always include _reading_ data,
most of the times _updating_, some times _creating_ and, in a few cases, even _deleting_.

The supported CRUD operations depend on how critical the entity is deemed to be.

For instance, meeting reservations or meeting entries can be fully managed by this API.

As a rule of thumb, if the entity allows remote creation by end-users, full CRUD support is usually
conceeded and available with some kind of grant.


## Details retrieval requests

Whenever a _dedicated_ endpoint exists for an entity (i.e.: `GET /<entity_name>/<id>`),
retrieving that specific single row with a `GET .../{id}` will yield the most fine-grained structure
detail available.

For ease of usage, most of the associated details nested in each sub-entity are included even when this
yields a bit of redundancy.

Depending of the depth level, some of the details may be summarized or not reported at all. To obtain the
highest level of detail, simply request the entity at the correct depth level.

(For example, the list of associated events included in a MeetingProgram row detail response will contain inevitably
 less associations and details than those obtained by retrieving each specific meeting event or result one by one.)

Also of note, most of these detail retrieval endpoints (`GET /<entity_name>/<id>`) will support an optional `locale`
parameter for translating specific locale-dependent display labels (default locale code is currently `it`).

_Supported locales:_

|  Locale code  | description |
| --- | --- |
| `it` | **default**, Italian |
| `en` | English |


## Maintenance mode

The app framework supports two different "maintenance" modes to inhibit most HTTP & API requests:
"soft" (or logic) maintenance & "hard" maintenance modes.

During _"soft" maintenenace_, a flag on the database will be set, new JWT sessions will be refused and any incoming API request
will be rejected with a `"Maintenance mode is ON"` error message - unless the
requesting user has admin grants.

Conversely, _"hard"  mainentenance_ mode disables the app running on the host with a static site and does not
change the database. API sessions may still be available during "hard" maintenance mode, given that the
API endpoints are also served from a different container.


* * *


<!-- include(blueprint/session.apib) -->

<!-- include(blueprint/admin_grants.apib) -->
<!-- include(blueprint/api_daily_uses.apib) -->
<!-- include(blueprint/badge_payments.apib) -->
<!-- include(blueprint/badges.apib) -->
<!-- include(blueprint/calendars_api.apib) -->
<!-- include(blueprint/category_types.apib) -->
<!-- include(blueprint/cities.apib) -->
<!-- include(blueprint/federation_types.apib) -->
<!-- include(blueprint/import_queues.apib) -->
<!-- include(blueprint/issues.apib) -->
<!-- include(blueprint/laps.apib) -->
<!-- include(blueprint/lookup.apib) -->
<!-- include(blueprint/meeting_entries.apib) -->
<!-- include(blueprint/meeting_events.apib) -->
<!-- include(blueprint/meeting_individual_results.apib) -->
<!-- include(blueprint/meeting_programs.apib) -->
<!-- include(blueprint/meeting_relay_results.apib) -->
<!-- include(blueprint/meeting_relay_swimmers.apib) -->
<!-- include(blueprint/meeting_reservations.apib) -->
<!-- include(blueprint/meeting_sessions.apib) -->
<!-- include(blueprint/meetings.apib) -->
<!-- include(blueprint/season_types.apib) -->
<!-- include(blueprint/seasons.apib) -->
<!-- include(blueprint/settings.apib) -->
<!-- include(blueprint/standard_timings.apib) -->
<!-- include(blueprint/swimmers.apib) -->
<!-- include(blueprint/swimming_pools.apib) -->
<!-- include(blueprint/team_affiliations.apib) -->
<!-- include(blueprint/team_managers.apib) -->
<!-- include(blueprint/teams.apib) -->
<!-- include(blueprint/tools.apib) -->
<!-- include(blueprint/user_laps.apib) -->
<!-- include(blueprint/user_results.apib) -->
<!-- include(blueprint/user_workshops.apib) -->
<!-- include(blueprint/users.apib) -->
