# Group TeamManagers

_**Admin-only group**_


## Team Manager details [/api/v3/team_manager/{id}]

+ Model (application/json)

        {
            "id": 1,
            "lock_version": 0,
            "created_at": "2015-12-22T11:34:24.000Z",
            "updated_at": "2015-12-22T11:34:24.000Z",
            "team_affiliation_id": 1539,
            "user_id": 2,
            "display_label": "ðŸ—£ leega - leega@example.com (Marco Ligabue, 1971) âž¡ FIN 2015/2016: ðŸ‘¥ CSI NUOTO OBER FERRARI",
            "short_label": "ðŸ—£ leega (Marco Ligabue) âž¡ FIN 2015/2016: ðŸ‘¥ CSI NUOTO OBER FERRARI",
            "manager": {
            "id": 2,
            "name": "leega",
            "description": "Marco Ligabue",
            "swimmer_id": 23,
            "email": "leega@example.com",
            "reset_password_token": null,
            "reset_password_sent_at": null,
            "remember_created_at": null,
            "sign_in_count": 1366,
            "current_sign_in_at": "2021-09-20T17:00:46.000Z",
            "last_sign_in_at": "2021-09-20T17:00:46.000Z",
            "current_sign_in_ip": "127.0.0.1",
            "last_sign_in_ip": "127.0.0.1",
            "confirmed_at": "2013-10-23T17:10:05.000Z",
            "confirmation_sent_at": "2013-10-23T17:10:02.000Z",
            "unconfirmed_email": null,
            "failed_attempts": 0,
            "unlock_token": null,
            "locked_at": null,
            "avatar_url": null,
            "swimmer_level_type_id": null,
            "coach_level_type_id": null,
            "jwt": null,
            "outstanding_goggle_score_bias": 800,
            "outstanding_standard_score_bias": 800,
            "last_name": "Ligabue",
            "first_name": "Marco",
            "year_of_birth": 1971,
            "provider": null,
            "uid": null
            },
            "team_affiliation": {
            "id": 1539,
            "number": "EMI-001454",
            "name": "CSI NUOTO OBER FERRARI",
            "compute_gogglecup": true,
            "team_id": 1,
            "season_id": 152,
            "autofilled": false
            }
        }


### find [GET]
The TeamManager instance matching the specified `id` returned as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 10 (number, required) - Team Manager (ManagedAffiliation) ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team_manager/10"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/team_manager/10',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":10, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Team Manager details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the TeamManager fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `user_id` | integer | associated User ID (Team Manager) |
| `team_affiliation_id` | integer | associated TeamAffiliation ID |


* * *


+ Parameters
    + id: 10 (number, required) - Team manager (ManagedAffiliation) ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"team_affiliation_id": 19}' \
            "<API_HOST:PORT>/api/v3/team_manager/10"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/team_manager/10',
                payload: { team_affiliation_id: 19 },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "team_affiliation_id": 19
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "team_affiliation_id": 19
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "team_affiliation_id": 19
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "team_affiliation_id": 19
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "team_affiliation_id": 19
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


### create [POST]

Creates a new ManagedAffiliation given the specified body parameters (that is, associates an existing User
as new Manager to an existing Affiliation).

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

- `user_id` (number, **required**): associated User ID (new Manager)
- `team_affiliation_id` (number, **required**): associated TeamAffiliation ID


* * *


+ Attributes
    + user_id: 2 (string, required) - associated User/Manager ID
    + team_affiliation_id: 12179 (string, required) - associated TeamAffiliation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"user_id": 2, "team_affiliation_id": 12179}' \
            "<API_HOST:PORT>/api/v3/team_manager"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/team_manager',
            {
                'user_id': 2,
                'team_affiliation_id': 12179
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 2,
                'team_affiliation_id': 12179
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'user_id': 2,
                'team_affiliation_id': 12179
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'user_id': 2,
                'team_affiliation_id': 12179
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 2,
                'team_affiliation_id': 12179
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 10 (number, required) - Team manager (ManagedAffiliation) ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team_manager/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/team_manager/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Team Manager list [/api/v3/team_managers{?page,per_page,user_id,team_affiliation_id,manager_name,team_name,season_description}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/team_managers?page=2>; rel=\"last\", <http://localhost:3000/api/v3/team_managers?page=2>; rel=\"next\""
            Total: 36
            Per-Page: 25
            Page: 1

    + Body

            [
                // ManagedAffiliation details 1
                {
                    "id": 1,
                    // [...]
                },

                // ManagedAffiliation details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of ManagedAffiliations associated with the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `user_id`
- `team_affiliation_id`
- `manager_name`
- `team_name`
- `season_description`

Returns exact matches for the first 2 parameters, matches any "like"-text for the remaining 3 fields.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + user_id: 1 (number, optional) - associated User ID
    + team_affiliation_id: 18 (number, optional) - associated TeamAffiliation ID
    + manager_name: 1 (string, optional) - associated Manager (User) name; matches any "like"-text
    + team_name: 1 (string, optional) - associated Team name; matches any "like"-text
    + season_description: 1 (string, optional) - associated Season description; matches any "like"-text
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team_managers?user_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/team_managers',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { user_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Team Manager list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }
