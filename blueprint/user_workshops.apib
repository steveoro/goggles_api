# Group UserWorkshops

## UserWorkshop details [/api/v3/user_workshop/{id}]

+ Model (application/json)

        {
            "id": 7078,
            "header_date": "2021-06-19",
            "header_year": "2021/2022",
            "code": "workshop-1",
            "description": "DDS Creolachester Workshop",
            "edition": 6,
            "notes": "Cupiditate mollitia fugiat nisi beatae.",
            "user_id": 179871,
            "team_id": 169194,
            "season_id": 296497,
            "edition_type_id": 4,
            "timing_type_id": 1,
            "swimming_pool_id": null,
            "autofilled": true,
            "off_season": true,
            "confirmed": true,
            "cancelled": false,
            "pb_acquired": false,
            "read_only": false,
            "edition_label": "2021/2022",

            "season": {
                "id": 296497,
                "description": "Fake Season 1/952",
                "begin_date": "2021-04-21",
                "end_date": "2022-01-21",
                "season_type_id": 3,
                "header_year": "2021/2022",
                "edition": 952,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "individual_rank": true,
                "badge_fee": null
            },

            "edition_type": {
                "id": 4,
                "code": "A",
                "label": "YEA",
                "long_label": "YEAR",
                "alt_label": "YEA"
            },
            "timing_type": {
                "id": 1,
                "code": "M",
                "label": "MAN",
                "long_label": "MANUAL",
                "alt_label": "MAN"
            },
            "season_type": {
                "id": 3,
                "code": "MASUISP",
                "description": "CIRCUITO ITALIANO MASTER UISP",
                "short_name": "MASTER UISP",
                "federation_type_id": 3
            },
            "federation_type": {
                "id": 3,
                "code": "UISP",
                "description": "UNIONE ITALIANA SPORT",
                "short_name": "UISP"
            },

            "user": {
                "id": 179871,
                "name": "cleveland.reinger-9989",
                "description": "Cleveland Reinger",
                "swimmer_id": null,
                "email": "cleveland.reinger-9989@fake.example.net",
                // (...)
                "swimmer_level_type_id": 11,
                "coach_level_type_id": null,
                "outstanding_goggle_score_bias": 800,
                "outstanding_standard_score_bias": 800,
                "last_name": "Reinger",
                "first_name": "Cleveland",
                "year_of_birth": 1996,
                "provider": null,
                "uid": null
            },

            "home_team": {
                // (The node is named 'home_team', but the instance is a Team)
                "id": 169194,
                "name": "Lake Antonettemouth Swimming Club 2021",
                "editable_name": "Lake Antonettemouth Swimming Club 2021",
                "address": "287 Kristyn Brook",
                "zip": "008723",
                "phone_mobile": "436-825-5041 x513",
                "phone_number": "268.799.5715",
                "fax_number": null,
                "e_mail": "florencia@example.net",
                "contact_name": "Kaye Stiedemann",
                "notes": "Ground round shank pastrami ham hock ham pork turkey prosciutto.",
                "name_variations": null,
                "city_id": 286107,
                "home_page_url": null,
                "city": {
                    "id": 286107,
                    "name": "Lake Antonettemouth",
                    "zip": null,
                    "area": "Lefkosia",
                    "country": "Cyprus",
                    "country_code": "CY",
                    "latitude": "",
                    "longitude": "",
                    "plus_code": null,
                    "region": "?",
                    "area_code": "01"
                }
            },
            "swimming_pool": null
        }


### find [GET]
The UserWorkshop instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `User` (creator of the Workshop)
- `Season`
- `EditionType`
- `SeasonType`
- `FederationType`
- `TimingType`
- `Team` (default team or organizing Home Team)
- `City` (home city of the team)

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 1 (number, required) - UserWorkshop ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_workshop/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/user_workshop/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [UserWorkshop details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the UserWorkshop fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'UserWorkshop' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `code` | string | Workshop code-name (recurring meetings should have the same code to be easily identified) |
| `header_date` | string | header (main) date for the Workshop in ISO format (`YYYY-MM-DD`) |
| `header_year` | string | header (main) year for the Workshop (`YYYY`) |
| `description` | string | displayed Workshop description |
| `notes` | string | additional notes |
| `edition` | integer | Edition number |
| `edition_type_id` | integer | EditionType ID |
| | _id_ | _code: description_ |
| | 1 | `O`: ordinal number |
| | 2 | `R`: roman numeral |
| | 3 | `N`: none |
| | 4 | `Y`: year |
| | 5 | `S`: season |
| `timing_type_id` | integer | TimingType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `S`: semi-automatic |
| | 3 | `A`: automatic |
| `user_id` | integer | User registering this information |
| `team_id` | integer | associated Team ID |
| `swimming_pool_id` | integer | SwimmingPool ID for the Workshop |
| `autofilled` | boolean | `true` if the fields have been filled-in by the data-import procedure (may need revision) |
| `off_season` | boolean | `true` if the Workshop does not concur in the overall scoring of its Season |
| `confirmed` | boolean | `true` if the Workshop has been confirmed |
| `cancelled` | boolean | `true` if the Workshop has been cancelled |
| `pb_acquired` | boolean | `true` if athletes' personal-best timings and scores have already been computed |
| `season_id` | integer | Season ID for the Workshop (Admin only) |
| `read_only` | boolean | `true` to disable further editing by automatic data-import procedure (Admin only) |


* * *


+ Parameters
    + id: 1 (number, required) - UserWorkshop ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"header_year": "2020/2021", "description": "Internal team Workshop"}' \
            "<API_HOST:PORT>/api/v3/user_workshop/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/user_workshop/1',
                payload: {
                    header_year: "2020/2021",
                    description: "Internal team Workshop"
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "description": "Internal team Workshop"
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "description": "Internal team Workshop"
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "description": "Internal team Workshop"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "header_year": "2020/2021",
                "description": "Internal team Workshop"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "header_year": "2020/2021",
                "description": "Internal team Workshop"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new UserWorkshop, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| *`code` | string | Workshop code-name (recurring meetings should have the same code to be easily identified) |
| *`header_date` | string | header (main) date for the Workshop in ISO format (`YYYY-MM-DD`) |
| *`header_year` | string | header (main) year for the Workshop (`YYYY`) |
| `description` | string | displayed Workshop description |
| `notes` | string | additional notes |
| `edition` | integer | Edition number |
| *`edition_type_id` | integer | EditionType ID |
| | _id_ | _code: description_ |
| | 1 | `O`: ordinal number |
| | 2 | `R`: roman numeral |
| | 3 | `N`: none |
| | 4 | `Y`: year |
| | 5 | `S`: season |
| *`timing_type_id` | integer | TimingType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `S`: semi-automatic |
| | 3 | `A`: automatic |
| *`user_id` | integer | User registering this information |
| *`team_id` | integer | associated Team ID |
| *`season_id` | integer | Season ID for the Workshop |
| `swimming_pool_id` | integer | SwimmingPool ID for the Workshop |
| `autofilled` | boolean | `true` if the fields have been filled-in by the data-import procedure (may need revision) |
| `off_season` | boolean | `true` if the Workshop does not concur in the overall scoring of its Season |
| `confirmed` | boolean | `true` if the Workshop has been confirmed |
| `cancelled` | boolean | `true` if the Workshop has been cancelled |
| `pb_acquired` | boolean | `true` if athletes' personal-best timings and scores have already been computed |
| `read_only` | boolean | `true` to disable further editing by automatic data-import procedure |


* * *


+ Attributes
    + code (string, required)
    + header_date (string, required)
    + header_year (string, required)
    + edition_type_id (number, required)
    + timing_type_id (number, required)
    + entry_time_type_id (number, required)
    + user_id (number, required)
    + team_id (number, required)
    + season_id (number, required)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"code": "workshop-1", "header_date": "2021-06-19", \
                "header_year": "2021/2022", "description": "DDS Creolachester Workshop", \
                "edition": 1, "user_id": 179871, "team_id": 169194, \
                "season_id": 296497, "edition_type_id": 4, "timing_type_id": 1}' \
            "<API_HOST:PORT>/api/v3/user_workshop"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/user_workshop',
            {
                "code": "workshop-1",
                "header_date": "2021-06-19",
                "header_year": "2021/2022",
                "description": "DDS Creolachester Workshop",
                "edition": 1,
                "user_id": 179871,
                "team_id": 169194,
                "season_id": 296497,
                "edition_type_id": 4,
                "timing_type_id": 1
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "code": "workshop-1",
                "header_date": "2021-06-19",
                "header_year": "2021/2022",
                "description": "DDS Creolachester Workshop",
                "edition": 1,
                "user_id": 179871,
                "team_id": 169194,
                "season_id": 296497,
                "edition_type_id": 4,
                "timing_type_id": 1
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "code": "workshop-1",
                "header_date": "2021-06-19",
                "header_year": "2021/2022",
                "description": "DDS Creolachester Workshop",
                "edition": 1,
                "user_id": 179871,
                "team_id": 169194,
                "season_id": 296497,
                "edition_type_id": 4,
                "timing_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "code": "workshop-1",
                "header_date": "2021-06-19",
                "header_year": "2021/2022",
                "description": "DDS Creolachester Workshop",
                "edition": 1,
                "user_id": 179871,
                "team_id": 169194,
                "season_id": 296497,
                "edition_type_id": 4,
                "timing_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "code": "workshop-1",
                "header_date": "2021-06-19",
                "header_year": "2021/2022",
                "description": "DDS Creolachester Workshop",
                "edition": 1,
                "user_id": 179871,
                "team_id": 169194,
                "season_id": 296497,
                "edition_type_id": 4,
                "timing_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 1 (number, required) - UserWorkshop ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_workshop/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/user_workshop/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# UserWorkshop list [/api/v3/user_workshops{?page,per_page,name,user_id,team_id,season_id,date,header_year,select2_format}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/user_workshops?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/user_workshops?page=2&team_id=1>; rel=\"next\""
            Total: 46
            Per-Page: 25
            Page: 1

    + Body

            [
                // UserWorkshop details 1
                {
                    "id": 1,
                    // [...]
                },

                // UserWorkshop details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of UserWorkshops associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `name`
- `user_id`
- `team_id`
- `season_id`
- `date`
- `header_year`
- `select2_format`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *
name,user_id,team_id,season_id,date,header_year,select2_format

+ Parameters
    + name: `workshop-1` (string, optional) - generic FULLTEXT search on `description` & `code` fields
    + user_id: 1 (number, optional) - associated User ID
    + team_id: 1 (number, optional) - associated Team ID
    + season_id: 1 (number, optional) - associated Season ID
    + date: `2005-11-23` (string, optional) - filter by `header_date` in ISO format (`YYYY-MM-DD`)
    + header_year: "2020/2021" (string, optional) - associated Swimmer ID
    + select2_format: false (boolean, optional) - `true` to enable the bespoke Select2 simplified output format
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_workshops?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/user_workshops',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [UserWorkshop list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
