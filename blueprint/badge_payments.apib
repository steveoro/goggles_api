# Group BadgePayments

## BadgePayment details [/api/v3/badge_payment/{id}]

+ Model (application/json)

        {
            "id": 1,
            "amount": "72.5",
            "payment_date": "2018-10-01",
            "notes": "Saldo 2017-2018",
            "manual": false,
            "badge_id": 111386,
            "user_id": 2,
            "badge": {
                "id": 111386,
                "number": "?",
                "season_id": 182,
                "swimmer_id": 142,
                "team_id": 1,
                "category_type_id": 1252,
                "entry_time_type_id": 5,
                "team_affiliation_id": 5197,
                "final_rank": nil,
                "off_gogglecup": false,
                "fees_due": true,
                "badge_due": false,
                "relays_due": true,
                "display_label": "MASTER FIN 2018/2019: ALLORO STEFANO (MAL, 1969) âž¡ CSI Nuoto OBER FERRARI A.S.D., Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "FIN 2018/2019: ALLORO STEFANO (1969) âž¡ CSI Nuoto OBER FERRARI A.S.D., Reggio nell Emilia"
            },
            "swimmer": {
                "id": 142,
                "last_name": "ALLORO",
                "first_name": "STEFANO",
                "year_of_birth": 1969,
                "phone_mobile": nil,
                "phone_number": nil,
                "e_mail": nil,
                "nickname": "",
                "associated_user_id": 1,
                "gender_type_id": 1,
                "complete_name": "ALLORO STEFANO",
                "year_guessed": false,
                "long_label": "ALLORO STEFANO (MAL, 1969)",
                "display_label": "ALLORO STEFANO (MAL, 1969)",
                "short_label": "ALLORO STEFANO (1969)"
            },
            "season": {
                "id": 182,
                "description": "Circuito italiano supermaster FIN 2018/2019",
                "begin_date": "2018-10-01",
                "end_date": "2019-09-30",
                "season_type_id": 1,
                "header_year": "2018/2019",
                "edition": 18,
                "edition_type_id": 5,
                "timing_type_id": 3,
                "rules": nil,
                "individual_rank": true,
                "badge_fee": "24.0",
                "display_label": "MASTER FIN 2018/2019",
                "short_label": "FIN 2018/2019"
            },
            "team": {
                "id": 1,
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "CSI Nuoto OBER FERRARI A.S.D.",
                "address": "Via Agosti, 6",
                "zip": "",
                "phone_mobile": "",
                "phone_number": "",
                "fax_number": nil,
                "e_mail": "",
                "contact_name": "Marco Ligabue",
                "notes": "L'IBAN per i pagamenti delle iscrizioni alle gare Ã¨ IT91T0347501605CC0010433557",
                "name_variations": "CSI Nuoto OBER FERRARI A.S.D.;CSI Nuoto Ober Ferrari;CSI NUOTO OBER FERRARI ASD;CSI O. FERRARI",
                "city_id": 37,
                "home_page_url": "",
                "display_label": "CSI Nuoto OBER FERRARI A.S.D., Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "CSI Nuoto OBER FERRARI A.S.D., Reggio nell Emilia",
                "city_name": "Reggio nell Emilia, Reggio Emilia (IT)"
            },
            "team_affiliation": {
                "id": 5197,
                "number": "46103",
                "name": "CSI NUOTO OBER FERRARI ASD",
                "compute_gogglecup": true,
                "team_id": 1,
                "season_id": 182,
                "autofilled": false,
                "display_label": "MASTER FIN 2018/2019: ðŸ‘¥ CSI Nuoto OBER FERRARI A.S.D., Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "FIN 2018/2019: ðŸ‘¥ CSI NUOTO OBER FERRARI ASD"
            },
            "category_type": {
                "id": 1252,
                "code": "M50",
                "federation_code": "G",
                "description": "MASTER 50",
                "short_name": "M50",
                "group_name": "MASTER",
                "age_begin": 50,
                "age_end": 54,
                "relay": false,
                "season_id": 182,
                "out_of_race": false,
                "undivided": false,
                "display_label": "M50, FIN MASTER 2018/2019",
                "short_label": "(2018/2019) M50"
            },
            "entry_time_type": {
                "id": 5,
                "code": "U",
                "label": "LR",
                "long_label": "LAST RESULT",
                "alt_label": "LR"
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            }
        }


### find [GET]
The BadgePayment instance matching the specified `id` returned as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'BadgePayment' or have generic admin grants

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 164 (number, required) - BadgePayment ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badge_payment/164"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/badge_payment/164',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":164, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [BadgePayment details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the BadgePayment fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'BadgePayment' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `payment_date` | string | payment date in ISO format |
| `amount` | float | payment amount |
| `notes` | string | free text notes |
| `manual` | boolean | `true` for cash payments made by hand |
| `badge_id` | integer | associated Badge ID |
| `user_id` | integer | User ID associated to the payment (either the team manager or the user) |


* * *


+ Parameters
    + id: 164 (number, required) - BadgePayment ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"payment_date": "2018-02-01", "amount": "60.0"}' \
            "<API_HOST:PORT>/api/v3/badge_payment/164"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/badge_payment/164',
                payload: {
                    "payment_date": "2018-02-01",
                    "amount": "60.0"
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "payment_date": "2018-02-01",
                "amount": "60.0"
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "payment_date": "2018-02-01",
                "amount": "60.0"
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "payment_date": "2018-02-01",
                "amount": "60.0"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "payment_date": "2018-02-01",
                "amount": "60.0"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "payment_date": "2018-02-01",
                "amount": "60.0"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new BadgePayment, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'BadgePayment' or have generic admin grants


#### Body Attributes:

Same attributes as `PUT /badge_payment`, all optional (except `season_id`, *required*,
and `id`, not present).


* * *


+ Attributes
    + payment_date: `2020-01-01` (string, required) - payment date in ISO format
    + amount: `50.0` (string, required) - payment amount
    + badge_id: 124937 (number, required) - associated Badge ID
    + user_id: 2 (number, optional) - User ID associated to the payment (either the team manager or the user)
    + notes: `covers also meeting registration costs` (string, optional) - free text notes
    + manual: true (boolean, optional) - `true` for cash payments made by hand


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"payment_date": "2020-01-01", "amount": "50.0", "badge_id": 124937, \
                 "user_id": 2, "notes": "covers also meeting registration costs", "manual": true }'
            "<API_HOST:PORT>/api/v3/badge_payment"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/badge_payment',
            {
                "payment_date": "2020-01-01",
                "amount": "50.0",
                "badge_id": 124937,
                "user_id": 2,
                "notes": "covers also meeting registration costs",
                "manual": true
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "payment_date": "2020-01-01",
                "amount": "50.0",
                "badge_id": 124937,
                "user_id": 2,
                "notes": "covers also meeting registration costs",
                "manual": true
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "payment_date": "2020-01-01",
                "amount": "50.0",
                "badge_id": 124937,
                "user_id": 2,
                "notes": "covers also meeting registration costs",
                "manual": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "payment_date": "2020-01-01",
                "amount": "50.0",
                "badge_id": 124937,
                "user_id": 2,
                "notes": "covers also meeting registration costs",
                "manual": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "payment_date": "2020-01-01",
                "amount": "50.0",
                "badge_id": 124937,
                "user_id": 2,
                "notes": "covers also meeting registration costs",
                "manual": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'BadgePayment' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 125 (number, required) - BadgePayment ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badge_payment/125"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/badge_payment/125',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# BadgePayment list [/api/v3/badge_payments{?page,per_page,from_date,user_id,badge_id,manual}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/badge_payments?page=3&from_date=2018-01-01>; rel=\"last\", <http://localhost:3000/api/v3/badge_payments?page=1&from_date=2018-01-01>; rel=\"next\""
            Total: 150
            Per-Page: 25
            Page: 1

    + Body

            [
                // BadgePayment details 1
                {
                    "id": 53,
                    // [...]
                },

                // BadgePayment details 2
                {
                    "id": 54,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of BadgePayments associated to the specified filtering values,
returned as JSON and optionally filtered by:

- `from_date`, starting payment date in ISO format (all payments on or after this date)
- `user_id`
- `badge_id`
- `manual`, `true` for cash payments made by hand

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'BadgePayment' or have generic admin grants


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + from_date: `2018-01-01` (string, optional) - starting payment date in ISO format (all payments on or after this date)
    + user_id: 2 (number, optional) - associated User ID
    + badge_id: 12345 (number, optional) - associated Badge ID
    + manual: false (boolean, optional) - `true` for cash payments made by hand

    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badge_payments?from_date=2018-01-01&user_id=2&badge_id=12345&manual=false"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/badge_payments',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: {
                        from_date: "2018-01-01",
                        user_id: 2,
                        badge_id: 12345,
                        manual: false
                    }
                }
            )
    => <RestClient::Response 200 "[{\"id\":53,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [BadgePayment list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
