# Group Issues

_**Admin-only group**_


## Issue details [/api/v3/issue/{id}]

+ Model (application/json)

        {
            "id": 10888,
            "user_id": 316693,
            "code": "3b",
            "req": "{\"swimmer_id\":233686}",
            "priority": 1,
            "status": 1,
            "label": "Cambio nuotatore",
            "long_label": "Cambio nuotatore associato",
            "alt_label": "Cambio nuotatore"
        }


### find [GET]
The Issue instance matching the specified `id` returned as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


* * *


+ Parameters
    + id: 10888 (number, required) - Issue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/issue/10888"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/issue/10888',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":10888, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Issue details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the Issue fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `req` | string | parsable JSON containing the request parameters (keys & values) |
| `status` | integer | request status (processable: 0..3, solved/rejected: 4..6) |
| `priority` | integer | request priority (0..3) |

**Supported values:**

See *create [POST]* for more details about each field.


* * *


+ Parameters
    + id: 10888 (number, required) - Issue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"priority": 2, "status": 3}' \
            "<API_HOST:PORT>/api/v3/issue/10888"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/issue/10888',
                payload: { priority: 2, status: 3 },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "priority": 2
                "status": 3
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "priority": 2
                "status": 3
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "priority": 2
                "status": 3
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "priority": 2
                "status": 3
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "priority": 2
                "status": 3
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new Issue, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| *`user_id` | integer | associated User ID |
| *`code` | string | 3 character code defining the type of the issue (see below) |
| *`req` | string | parsable JSON containing the request parameters (keys & values) |
| `status` | integer | request status (processable: 0..3, solved/rejected: 4..6) |
| `priority` | integer | request priority (0..3) |

**Supported values per attribute:**

- `code`
    | _value_ | _description_ |
    | --- | --- |
    | `0` | request upgrade to team manager for a specific (Team, [season IDs]) |
    | `1a` | new meeting url for future data-import |
    | `1b` | report missing result |
    | `1b1` | report result mistake |
    | `2b1` | wrong team, swimmer or meeting attribution |
    | `3b` | change swimmer association (free select from existing swimmer) |
    | `3c` | free associated swimmer details edit |
    | `4` |  generic application error/bug |

- `status`
    | _value_ | _description_ |
    | --- | --- |
    | 0 | new |
    | 1 | in review |
    | 2 | accepted/in process |
    | 3 | accepted/paused |
    | 4 | sorted out & auto-deletable |
    | 5 | rejected/duplicate |
    | 6 |  rejected/missing info or incomplete |

- `priority`
    | _value_ | _description_ |
    | --- | --- |
    | 0 | normal |
    | 1 | prioritized |
    | 2 | urgent |
    | 3 | critical |


**Supported parameters per `req` type (code):**

- `req` JSON payload
    | _code_ | _parameters_ |
    | --- | --- |
    | `0` | `team_id`: ID, `season`: JSON array of IDs |
    | `1a` | `meeting_id`: ID, `results_url`: URL string |
    | `1b` | `event_type_id`: ID, `swimmer_id`: ID, `parent_meeting_id`: ID, `parent_meeting_class`: 'Meeting'/'UserWorkshop', `minutes`: number, `seconds`: number, `hundredths`: number |
    | `1b1` | `result_id`: ID, `result_class`: 'MeetingIndividualResult'/'UserResult', `minutes`: number, `seconds`: number, `hundredths`: number |
    | `2b1` | `result_id`: ID, `result_class`: 'MeetingIndividualResult'/'UserResult', `wrong_meeting`: '1'/'0', `wrong_swimmer`: '1'/'0', `wrong_team`: '1'/'0' |
    | `3b` | `swimmer_id`: ID |
    | `3c` | `type3c_first_name`: first name, `type3c_last_name`: last name, `type3c_year_of_birth`: year, `type3c_gender_type_id`: ID |
    | `4` | `expected`: free description, `outcome`: free description, `reproduce`: free description |


* * *


+ Attributes
    + user_id (number, required) - associated User ID
    + code (string, required) - 3 character code defining the Issue type
    + req (string, required) - parsable JSON containing the request parameters (keys & values)

    + status 0 (number, optional) - request status (processable: 0..3, solved/rejected: 4..6), default: 0
    + priority 0 (number, optional) - request priority (0..3), default: 0


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"user_id": 179297, "code": "3b", "req": "{\"swimmer_id\": 142}"}'
            "<API_HOST:PORT>/api/v3/issue"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/issue',
            {
                'user_id': 179297,
                'code': '3b',
                'req': "{\"swimmer_id\": 142}"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 179297,
                'code': '3b',
                'req': "{\"swimmer_id\": 142}"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'user_id': 179297,
                'code': '3b',
                'req': "{\"swimmer_id\": 142}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'user_id': 179297,
                'code': '3b',
                'req': "{\"swimmer_id\": 142}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 179297,
                'code': '3b',
                'req': "{\"swimmer_id\": 142}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 10888 (number, required) - Issue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/issue/10888"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/issue/10888',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Issue list [/api/v3/issues{?page,per_page,user_id,code,priority,status}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/issues?page=2&priority=1>; rel=\"last\", <http://localhost:3000/api/v3/issues?page=2&done=true>; rel=\"next\""
            Total: 3
            Per-Page: 25
            Page: 1

    + Body

            [
                // Issue details 1
                {
                    "id": 1,
                    // [...]
                },

                // Issue details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Issues associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `user_id`
- `code`
- `priority`
- `status`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + user_id: 1 (number, optional) - associated User ID
    + code: "3b" (string, optional) - issue code type (max 3 chars; see `create [POST]` Issue for details)
    + priority: 0 (number, optional) - request priority (0..3)
    + status: 0 (number, optional) - request status (processable: 0..3, solved/rejected: 4..6)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/issues?done=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/issues',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { done: true }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Issue list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
