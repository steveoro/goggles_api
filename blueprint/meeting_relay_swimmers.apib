# Group MeetingRelaySwimmers

## MeetingRelaySwimmer details [/api/v3/meeting_relay_swimmer/{id}]

+ Model (application/json)

        {
            "id": 2329,
            "relay_order": 4,
            "swimmer_id": 24842,
            "badge_id": 111358,
            "stroke_type_id": 1,
            "reaction_time": "0.75",
            "minutes": 0,
            "seconds": 35,
            "hundredths": 24,
            "minutes_from_start": 1,
            "seconds_from_start": 28,
            "hundredths_from_start": 96,
            "length_in_meters": 100,
            "meeting_relay_result_id": 37828,
            "timing": "0'00\"00",
            "swimmer_name": "Yost Tran 361",
            "swimmer_label": "Yost Tran 361 (MAL, 1965)",
            "team_name": "Noratown Swimming Club ASD",
            "team_label": "Noratown Swimming Club ASD",
            "event_label": "4x50 MI",
            "stroke_code": "SL",
            "gender_code": "M",

            "meeting_relay_result": {
                "id": 37828,
                "rank": 3,
                "play_off": false,
                "out_of_race": false,
                "disqualified": false,
                "standard_points": "0.0",
                "meeting_points": "18.0",
                "minutes": 2,
                "seconds": 34,
                "hundredths": 40,
                "team_id": 826,
                "meeting_program_id": 163737,
                "disqualification_code_type_id": null,
                "relay_code": "Eden Sport",
                "reaction_time": "0.0",
                "entry_minutes": null,
                "entry_seconds": null,
                "entry_hundredths": null,
                "team_affiliation_id": 5196,
                "entry_time_type_id": null,
                "timing": "2'34\"40",
                "team_name": "Noratown Swimming Club ASD",
                "team_label": "Noratown Swimming Club ASD",
                "event_label": "4x50 MI",
                "category_label": "(2018/2019) >200",
                "category_code": "200-999",
                "gender_code": "M"
            },

            "swimmer": {
                "id": 24842,
                "short_label": "Yost Tran 361 (1965)",
                "complete_name": "Yost Tran 361",
                "last_name": "Yost",
                "first_name": "Tran",
                "year_of_birth": 1965,
                "year_guessed": false,
                "associated_user_label": null
            },
            "badge": {
                "id": 111358,
                "number": "-04230257",
                "season_id": 181,
                "swimmer_id": 24842,
                "team_id": 826,
                "category_type_id": 1214,
                "entry_time_type_id": 5,
                "team_affiliation_id": 5196,
                "final_rank": null,
                "off_gogglecup": false,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false,
                "display_label": "MASTER CSI 2018/2019: Yost Tran 361 (MAL, 1965) ➡ Noratown Swimming Club ASD",
                "short_label": "CSI 2018/2019: Yost Tran 361 (1965) ➡ Noratown Swimming Club ASD"
            },

            "stroke_type": {
                "id": 1,
                "code": "SL",
                "eventable": true,
                "label": "FS",
                "long_label": "FREESTYLE",
                "alt_label": "CR"
            },

            "meeting": {
                "id": 18106,
                "description": "FINALE CIRCUITO REGIONALE CSI 2018-2019",
                "entry_deadline": null,
                "warm_up_pool": false,
                "allows_under25": true,
                "reference_phone": null,
                "reference_e_mail": null,
                "reference_name": null,
                "notes": null,
                "manifest": false,
                "startlist": true,
                "results_acquired": true,
                "max_individual_events": 3,
                "configuration_file": "0",
                "edition": 2018,
                "season_id": 181,
                "autofilled": true,
                "header_date": "2019-05-26",
                "code": "csifinale",
                "header_year": "2018/2019",
                "max_individual_events_per_session": 0,
                "off_season": false,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "individual_score_computation_type_id": 1,
                "relay_score_computation_type_id": 1,
                "team_score_computation_type_id": 12,
                "meeting_score_computation_type_id": 1,
                "manifest_body": null,
                "confirmed": true,
                "tweeted": false,
                "posted": false,
                "cancelled": false,
                "pb_acquired": true,
                "home_team_id": null,
                "read_only": false,
                "meeting_fee": null,
                "event_fee": "3.3",
                "relay_fee": "5.0",
                "tags_by_user_list": null,
                "tags_by_team_list": null,
                "display_label": "MASTER CSI: 2018° FINALE CIRCUITO REGIONALE  -2019 2018/2019",
                "short_label": "2018° FINALE CIRCUITO REGIONALE - 2018/2019",
                "edition_label": "2018°",
                "meeting_date": "2019-05-26"
            },
            "meeting_session": {
                "id": 3014,
                "session_order": 2,
                "scheduled_date": "2019-05-26",
                "warm_up_time": "2000-01-01T14:30:00.000Z",
                "begin_time": "2000-01-01T15:00:00.000Z",
                "notes": "",
                "meeting_id": 18106,
                "swimming_pool_id": 32,
                "description": "FINALI",
                "autofilled": true,
                "day_part_type_id": 2
            },
            "meeting_event": {
                "id": 19874,
                "event_order": 7,
                "begin_time": "2000-01-01T15:00:00.000Z",
                "out_of_race": false,
                "autofilled": true,
                "notes": null,
                "meeting_session_id": 3014,
                "event_type_id": 26,
                "heat_type_id": 3,
                "split_gender_start_list": true,
                "split_category_start_list": false,
                "display_label": "2018° FINALE CIRCUITO REGIONALE - 2018/2019 (25 M): 7. 4x50 MI",
                "short_label": "4x50 MI"
            },
            "meeting_program": {
                "id": 163737,
                "event_order": 8,
                "category_type_id": 1220,
                "gender_type_id": 1,
                "autofilled": false,
                "out_of_race": false,
                "begin_time": null,
                "meeting_event_id": 19874,
                "pool_type_id": 1,
                "standard_timing_id": null,
                "event_label": "4x50 MI",
                "category_label": "(2018/2019) >200",
                "category_code": "200-999",
                "gender_code": "M",
                "pool_code": "25"
            },

            "event_type": {
                "id": 26,
                "code": "S4X50MI",
                "length_in_meters": 200,
                "relay": true,
                "stroke_type_id": 10,
                "style_order": 26,
                "mixed_gender": false,
                "partecipants": 4,
                "phases": 4,
                "phase_length_in_meters": 50,
                "label": "4x50 MI",
                "long_label": "4x50 INTERMIXED RELAY",
                "alt_label": "4x50 MI"
            },
            "team": {
                "id": 826,
                "name": "Noratown Swimming Club ASD",
                "editable_name": "Noratown Swimming Club ASD",
                "address": "54300 Chasity Stream",
                "zip": "085742",
                "phone_mobile": "1-752-810-0123 x365",
                "phone_number": "(731)522-1434 x29805",
                "fax_number": null,
                "e_mail": "rikki@example.org",
                "contact_name": "Joe Skiles",
                "notes": "Porchetta spare ribs jerky ham leberkas turducken brisket.",
                "name_variations": "Eden Sport",
                "city_id": null,
                "home_page_url": "http://halvorson.biz",
                "display_label": "Noratown Swimming Club ASD",
                "short_label": "Noratown Swimming Club ASD",
                "city_name": null
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            }
        }


### find [GET]
The MeetingRelaySwimmer instance matching the specified `id` returned as JSON.

The returned detailed result includes some of its parents and more: take a look at the structure aside for more details.

Some of the sub-entities (such as the GenderType) are duplicated in the hierachy tree for ease of reference.

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 2285 (number, required) - MeetingRelaySwimmer ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_swimmer/2285"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_swimmer/2285',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":2285, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingRelaySwimmer details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for all the MeetingRelaySwimmer fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelaySwimmer' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_relay_result_id` | integer | associated MeetingRelayResult ID |
| `swimmer_id` | integer | associated Swimmer ID |
| `badge_id` | integer | associated Badge ID |
| `stroke_type_id` | integer | associated StrokeType ID |
| | _id_ | _code: description_ |
| | 1 | `SL`: Freestyle |
| | 2 | `FA`: Butterfly |
| | 3 | `DO`: Backstroke |
| | 4 | `RA`: Breastroke |
| | 5 | `MI`: Individual Medley |
| | 6 | `PA`: Starts |
| | 7 | `VI`: Turns |
| | 8 | `PO`: Power |
| | 9 | `GE`: Generic |
| | 10 | `MX`: Mixed |
| `relay_order` | integer | swimmer ordering inside relay (starting position) |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `length_in_meters` | integer | lap length in meters |
| `minutes_from_start` | integer | overall minutes from heat start |
| `seconds_from_start` | integer | overall seconds from heat start |
| `hundredths_from_start` | integer | overall hundredths of second from heat start |


* * *


+ Parameters
    + id: 2285 (number, required) - MeetingRelaySwimmer ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"relay_order": 2, "minutes": 0, "seconds": 30, "hundredths": 55 }' \
            "<API_HOST:PORT>/api/v3/meeting_relay_swimmer/2285"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_swimmer/2285',
                payload: {
                    relay_order: 2,
                    minutes: 0,
                    seconds: 30,
                    hundredths: 55
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "relay_order": 2,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 55
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "relay_order": 2,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 55
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "relay_order": 2,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 55
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "relay_order": 2,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 55
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "position": 2,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 55
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingRelaySwimmer, given the specified body parameters.

Association with MIR is optional to allow meeting_relay_swimmer creation even before
the heat is over.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelaySwimmer' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_relay_result_id` | integer | **required**, associated MeetingRelayResult ID |
| `swimmer_id` | integer | **required**, associated Swimmer ID |
| `badge_id` | integer | **required**, associated Badge ID |
| `stroke_type_id` | integer | **required**, associated StrokeType ID |
| | _id_ | _code: description_ |
| | 1 | `SL`: Freestyle |
| | 2 | `FA`: Butterfly |
| | 3 | `DO`: Backstroke |
| | 4 | `RA`: Breastroke |
| | 5 | `MI`: Individual Medley |
| | 6 | `PA`: Starts |
| | 7 | `VI`: Turns |
| | 8 | `PO`: Power |
| | 9 | `GE`: Generic |
| | 10 | `MX`: Mixed |
| `relay_order` | integer | **required**, swimmer ordering inside relay (starting position) |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `length_in_meters` | integer | lap length in meters |
| `minutes_from_start` | integer | overall minutes from heat start |
| `seconds_from_start` | integer | overall seconds from heat start |
| `hundredths_from_start` | integer | overall hundredths of second from heat start |


* * *


+ Attributes
    + meeting_relay_result_id: 834879 (number, optional) - associated MeetingRelayResult ID
    + swimmer_id: 23 (number, required) - associated Swimmer ID
    + badge_id: 161956 (number, required) - associated Badge ID
    + stroke_type_id: 1 (number, required) - associated StrokeType ID
    + relay_order (number, optional)
    + reaction_time (number, optional)
    + minutes: 1 (number, optional)
    + seconds: 15 (number, optional)
    + hundredths: 97 (number, optional)
    + length_in_meters: 150 (number, optional)
    + minutes_from_start (number, optional)
    + seconds_from_start (number, optional)
    + hundredths_from_start (number, optional)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"meeting_relay_result_id": 834879, "badge_id": 168301, \
                 "stroke_type_id": 1, "swimmer_id": 23, \
                 "relay_order": 3, "minutes": 0, "seconds": 29 "hundredths": 97}'
            "<API_HOST:PORT>/api/v3/meeting_relay_swimmer"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_relay_swimmer',
            {
                "meeting_relay_result_id": 834879,
                "badge_id": 168301,
                "swimmer_id": 23,
                "stroke_type_id": 1,
                "relay_order": 3,
                "minutes": 0,
                "seconds": 29,
                "hundredths": 97
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_relay_result_id": 834879,
                "badge_id": 168301,
                "swimmer_id": 23,
                "stroke_type_id": 1,
                "relay_order": 3,
                "minutes": 0,
                "seconds": 29,
                "hundredths": 97
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "meeting_relay_result_id": 834879,
                "badge_id": 168301,
                "swimmer_id": 23,
                "stroke_type_id": 1,
                "relay_order": 3,
                "minutes": 0,
                "seconds": 29,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "meeting_relay_result_id": 834879,
                "badge_id": 168301,
                "swimmer_id": 23,
                "stroke_type_id": 1,
                "relay_order": 3,
                "minutes": 0,
                "seconds": 29,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_relay_result_id": 834879,
                "badge_id": 168301,
                "swimmer_id": 23,
                "stroke_type_id": 1,
                "relay_order": 3,
                "minutes": 0,
                "seconds": 29,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelaySwimmer' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 9983 (number, required) - MeetingRelaySwimmer ID of the row that has to be deleted


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_swimmer/9983"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_swimmer/9983',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingRelaySwimmer list [/api/v3/meeting_relay_swimmers{?page,per_page,meeting_relay_result_id,swimmer_id,badge_id,stroke_type_id,relay_order}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_relay_swimmers?page=1&meeting_relay_result_id=37828>"
            Total: 4
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingRelaySwimmer details 1
                {
                    "id": 2326,
                    // [...],
                    "relay_order": 1,
                    // [...],
                },

                // MeetingRelaySwimmer details 2
                {
                    "id": 2327,
                    // [...]
                    "relay_order": 2,
                    // [...],
                },

                // [...]
            ]


## list [GET]

The list of MeetingRelaySwimmers associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `meeting_relay_result_id`
- `swimmer_id`
- `badge_id`
- `stroke_type_id`
- `relay_order`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_relay_result_id: 37828 (number, required) - associated MeetingRelayResult ID
    + swimmer_id: 22149 (number, required) - associated Swimmer ID
    + badge_id: 111367 (number, required) - associated Badge ID
    + stroke_type_id: 1 (number, optional) - associated StrokeType ID
    + relay_order: 1 (number, required) - lap order inside the relay (1..4)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_swimmers?meeting_relay_result_id=37828"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_swimmers',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { meeting_relay_result_id: 37828 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":2326, ...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingRelaySwimmer list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
