# Group MeetingEvents

## MeetingEvent details [/api/v3/meeting_event/{id}]

+ Model (application/json)

        {
            "id": 1,
            "event_order": 1,
            "begin_time": "2000-01-01T00:00:00.000Z",
            "out_of_race": false,
            "autofilled": false,
            "notes": null,
            "meeting_session_id": 12,
            "event_type_id": 19,
            "heat_type_id": 3,
            "split_gender_start_list": true,
            "split_category_start_list": false,
            "display_label": "1Â° PROVA REGIONALE 2003/2004 (25 M): 1. 50 BS",
            "short_label": "50 BS",

            "meeting_session": {
                "id": 12,
                "session_order": 1,
                "scheduled_date": "2003-11-30",
                "warm_up_time": "2000-01-01T00:00:00.000Z",
                "begin_time": "2000-01-01T00:00:00.000Z",
                "notes": "",
                "meeting_id": 12,
                "swimming_pool_id": 6,
                "description": "FINALI",
                "autofilled": false,
                "day_part_type_id": null
            },

            "season": {
                "id": 4,
                "description": "Circuito Regionale Emilia master CSI 2003/2004",
                "begin_date": "2003-09-01",
                "end_date": "2004-06-30",
                "season_type_id": 2,
                "header_year": "2003/2004",
                "edition": 4,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "individual_rank": true,
                "badge_fee": null,
                "display_label": "MASTER CSI 2003/2004",
                "short_label": "CSI 2003/2004"
            },
            "season_type": {
                "id": 2,
                "code": "MASCSI",
                "description": "CIRCUITO ITALIANO MASTER CSI",
                "short_name": "MASTER CSI",
                "federation_type_id": 2
            },

            "event_type": {
                "id": 19,
                "code": "50RA",
                "length_in_meters": 50,
                "relay": false,
                "stroke_type_id": 4,
                "style_order": 19,
                "mixed_gender": false,
                "partecipants": 1,
                "phases": 1,
                "phase_length_in_meters": 50,
                "label": "50 BS",
                "long_label": "50 BREASTROKE",
                "alt_label": "50 BS"
            },
            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },
            "stroke_type": {
                "id": 4,
                "code": "RA",
                "eventable": true,
                "label": "BR",
                "long_label": "BREASTROKE",
                "alt_label": "BS"
            },
            "heat_type": {
                "id": 3,
                "code": "F",
                "default": false,
                "label": "FN",
                "long_label": "FINALS",
                "alt_label": "FN"
            },

            "meeting_programs": [
                {
                    "id": 448,
                    "event_order": 12,
                    "category_type_id": 43,
                    "gender_type_id": 1,
                    "autofilled": false,
                    "out_of_race": false,
                    "begin_time": null,
                    "meeting_event_id": 1,
                    "pool_type_id": 1,
                    "standard_timing_id": null,
                    "event_label": "50 BS",
                    "category_label": "(2003/2004) M25",
                    "category_code": "M25",
                    "gender_code": "M",
                    "pool_code": "25"
                },
                {
                    "id": 449,
                    "event_order": 13,
                    "category_type_id": 44,
                    "gender_type_id": 2,
                    "autofilled": false,
                    "out_of_race": false,
                    "begin_time": null,
                    "meeting_event_id": 1,
                    "pool_type_id": 1,
                    "standard_timing_id": null,
                    "event_label": "50 BS",
                    "category_label": "(2003/2004) M30",
                    "category_code": "M30",
                    "gender_code": "F",
                    "pool_code": "25"
                },
                {
                    "id": 452,
                    "event_order": 16,
                    "category_type_id": 44,
                    "gender_type_id": 1,
                    "autofilled": false,
                    "out_of_race": false,
                    "begin_time": null,
                    "meeting_event_id": 1,
                    "pool_type_id": 1,
                    "standard_timing_id": null,
                    "event_label": "50 BS",
                    "category_label": "(2003/2004) M30",
                    "category_code": "M30",
                    "gender_code": "M",
                    "pool_code": "25"
                },
                // [...All remaining MeetingProgram rows w/ details...]
            ]
        }


### find [GET]
The MeetingEvent instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `MeetingSession`
- `HeatType`
- `Season`
- `SeasonType`
- `MeetingProgram` (all associated rows, one for each category), each one embedding its own:
    - `EventType`
    - `PoolType`
    - `CategoryType`
    - `GenderType`
    - `StrokeType`

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 1 (number, required) - MeetingEvent ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_event/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_event/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingEvent details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


## edit [PUT]

Allows direct updates for most of the MeetingEvent fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `event_order` | Integer | ordinal number of this event |
| `begin_time` | String | begin time for this event (parsed with Time.zone, based on year 2000) |
| `out_of_race` | Boolean | true if this event does not concur in the overall rankings or scores |
| `autofilled` | Boolean | true if the fields have been filled-in by the data-import procedure (may need revision) |
| `notes` | String | free notes about this event |
| `meeting_session_id` | Integer | link to MeetingSession |
| `event_type_id` | Integer | link to EventType |
| `heat_type_id` | Integer | link to HeatType |
| | _id_ | _code: description_ |
| | 1 | `B`: standard heat or qualify |
| | 2 | `S`: semi-finals |
| | 3 | `G`: finals |
| `split_gender_start_list` | Boolean | `true` if this event splits gender |
| `split_category_start_list` | Boolean | `true` if this event splits category |


* * *


+ Parameters
    + id: 10 (number, required) - MeetingEvent ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"event_order": 5, "day": "out_of_race": false}' \
            "<API_HOST:PORT>/api/v3/meeting_event/10"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_event/10',
                payload: {
                    event_order: 5,
                    out_of_race: false
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "event_order": 5,
                "out_of_race": false
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "event_order": 5,
                "out_of_race": false
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingEvent, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

Same attributes as `PUT /meeting_event`, all optional except `meeting_session_id`, `event_order`,
`event_type_id` and `heat_type_id` which are *required* (`id` not needed when creating rows).


* * *


+ Attributes
    + meeting_session_id: 12 (number, required) - associated MeetingSession ID
    + event_order: 1 (number, required) - ordinal number of this event
    + event_type_id: 19 (number, required) - associated EventType ID
    + heat_type_id: 3 (number, required) - associated HeatType ID
    + begin_time: `14:00` (string, optional) - begin time for this event (parsed with Time.zone, based on year 2000)
    + out_of_race (string, optional) - `true` if this event does not concur in the overall rankings or scores
    + autofilled (boolean, optional) - `true` if the values were autofilled by the data-import procedure
    + notes (string, optional) - free text notes
    + split_gender_start_list (boolean, optional) - `true` if this event ranking is divided by gender
    + split_category_start_list (boolean, optional) - `true` if this event ranking is divided by category'


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"meeting_session_id": 12, "event_order": 1, "event_type_id": 19, \
                 "heat_type_id": 3, "begin_time": "14:00" }' \
            "<API_HOST:PORT>/api/v3/meeting_event"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_event',
            {
                "meeting_session_id": 12,
                "event_order": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "begin_time": "14:00"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_session_id": 12,
                "event_order": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "begin_time": "14:00"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "meeting_session_id": 12,
                "event_order": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "begin_time": "14:00"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "meeting_session_id": 12,
                "event_order": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "begin_time": "14:00"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_session_id": 12,
                "event_order": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "begin_time": "14:00"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 3 (number, required) - MeetingEvent ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_event/3"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_event/3',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


# MeetingEvent list [/api/v3/meeting_events{?page,per_page,meeting_id,meeting_session_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_events?page=2&meeting_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meeting_events?page=2&team_id=1>; rel=\"next\""
            Total: 6
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingEvent details 1
                {
                    "id": 1,
                    // [...]
                },

                // MeetingEvent details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of MeetingEvents associated to the specified filtering values,
returned as JSON and filtered by :

- `meeting_id` (**required**)
- `meeting_session_id`

Returns the exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_id: 1 (number, required) - associated Meeting ID
    + meeting_session_id: 1 (number, optional) - associated MeetingEvent ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_events?meeting_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_events',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { meeting_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingEvent list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
