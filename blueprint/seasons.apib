# Group Seasons

## Season details [/api/v3/season/{id}]

+ Model (application/json)

        {
            "id": 192,
            "description": "Circuito italiano supermaster FIN 2019/2020",
            "begin_date": "2019-10-01",
            "end_date": "2020-09-30",
            "season_type_id": 1,
            "header_year": "2019/2020",
            "edition": 19,
            "edition_type_id": 5,
            "timing_type_id": 3,
            "rules": null,
            "individual_rank": true,
            "badge_fee": "24.0",
            "display_label": "MASTER FIN 2019/2020",
            "short_label": "FIN 2019/2020",

            // Embedded associated entities:
            "season_type": {
                "id": 1,
                "code": "MASFIN",
                "description": "CIRCUITO ITALIANO MASTER FIN",
                "short_name": "MASTER FIN",
                "federation_type_id": 1,
                "federation_type": {
                    "id": 1,
                    "code": "FIN",
                    "description": "FEDERAZIONE ITALIANA NUOTO",
                    "short_name": "FIN"
                }
            },

            "edition_type": {
                "id": 5,
                "code": "S",
                "label": "SEA",
                "long_label": "SEASON",
                "alt_label": "SEA"
            },

            "timing_type": {
                "id": 3,
                "code": "A",
                "label": "AUT",
                "long_label": "AUTOMATIC",
                "alt_label": "AUT"
            },

            // *All* associated CategoryTypes (usually, more than 20):
            "category_types": [
                {
                    "id": 1288,
                    "code": "M25",
                    "federation_code": "B",
                    "description": "MASTER 25",
                    "short_name": "M25",
                    "group_name": "MASTER",
                    "age_begin": 25,
                    "age_end": 29,
                    "relay": false,
                    "season_id": 192,
                    "out_of_race": false,
                    "undivided": false
                    // [...see category_types API for more details...]
                },
                {
                    "id": 1289,
                    "code": "M30",
                    "federation_code": "C",
                    "description": "MASTER 30",
                    "short_name": "M30",
                    "group_name": "MASTER",
                    "age_begin": 30,
                    "age_end": 34,
                    "relay": false,
                    "season_id": 192,
                    "out_of_race": false,
                    "undivided": false
                },
                {
                    "id": 1290,
                    "code": "M35",
                    "federation_code": "D",
                    "description": "MASTER 35",
                    "short_name": "M35",
                    "group_name": "MASTER",
                    "age_begin": 35,
                    "age_end": 39,
                    "relay": false,
                    "season_id": 192,
                    "out_of_race": false,
                    "undivided": false
                },

                // [...]
            ]
        }


### find [GET]
The Season instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `SeasonType`
- `EditionType`
- `TimingType`
- `CategoryType`, _full list_ of associated rows

_See the `edit` endpoint for the list of supported values_

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 192 (number, required) - Season ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/season/192"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/season/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":191, ...">
    ```

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Season details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the Season fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Swimmer' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `description` | string | verbose name or description for the Season |
| `begin_date` | date | starting date or Season first day |
| `end_date` | date | ending date or Season last day |
| `season_type_id` | number | associated SeasonType ID |
| | _id_ | _code: description_ |
| | 1 | `MASFIN`: FIN Masters |
| | 2 | `MASCSI`: CSI Masters |
| | 3 | `MASUISP`: UISP Masters |
| | 4 | `AGOFIN`: FIN Pro |
| | 5 | `AGOCSI`: CSI Pro |
| | 6 | `AGOUISP`: UISP Pro |
| | 7 | `MASLEN`: FINA Masters |
| | 8 | `MASFINA`: FINA Masters |
| `header_year` | string | descriptive label for Season year; typical format: `YYYY` or `YYYY/YYYY+1` |
| `edition` | integer | Edition number |
| `edition_type_id` | number | associated EditionType ID |
| | _id_ | _code: description_ |
| | 1 | `O`: ordinal number |
| | 2 | `R`: roman numeral |
| | 3 | `N`: none |
| | 4 | `Y`: year |
| | 5 | `S`: season |
| `timing_type_id` | number | associated TimingType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `S`: semi-automatic |
| | 3 | `A`: automatic |
| `has_individual_rank` | boolean | true if individual rankings are supported |
| `badge_fee` | string/float | base registration/badge fee (in local currency) |


* * *


+ Parameters
    + id: 192 (number, required) - Season ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"description": "Circuito italiano supermaster FIN 2019/2020", \
                 "header_year": "2019/2020", edition: 19}' \
            "<API_HOST:PORT>/api/v3/season/192"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/season/142',
                payload: {
                    description: "Circuito italiano supermaster FIN 2019/2020",
                    header_year: "2019/2020", edition: 19
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "header_year": "2019/2020",
                "edition": 19,
                "has_individual_rank": true
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "header_year": "2019/2020",
                "edition": 19,
                "has_individual_rank": true
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "header_year": "2019/2020",
                "edition": 19,
                "has_individual_rank": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "header_year": "2019/2020",
                "edition": 19,
                "has_individual_rank": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "header_year": "2019/2020",
                "edition": 19,
                "has_individual_rank": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new Season, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `id` | number | _optional:_  force or override the created row ID value (must be unique) |
| `description` | string | verbose name or description for the Season |
| `begin_date` | date | starting date or Season first day |
| `end_date` | date | ending date or Season last day |
| `season_type_id` | number | associated SeasonType ID |
| | _id_ | _code: description_ |
| | 1 | `MASFIN`: FIN Masters |
| | 2 | `MASCSI`: CSI Masters |
| | 3 | `MASUISP`: UISP Masters |
| | 4 | `AGOFIN`: FIN Pro |
| | 5 | `AGOCSI`: CSI Pro |
| | 6 | `AGOUISP`: UISP Pro |
| | 7 | `MASLEN`: FINA Masters |
| | 8 | `MASFINA`: FINA Masters |
| `header_year` | string | descriptive label for Season year; typical format: `YYYY` or `YYYY/YYYY+1` |
| `edition` | integer | Edition number |
| `edition_type_id` | number | associated EditionType ID |
| | _id_ | _code: description_ |
| | 1 | `O`: ordinal number |
| | 2 | `R`: roman numeral |
| | 3 | `N`: none |
| | 4 | `Y`: year |
| | 5 | `S`: season |
| `timing_type_id` | number | associated TimingType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `S`: semi-automatic |
| | 3 | `A`: automatic |
| `individual_rank` | boolean | _optional:_ +true+ if individual rankings are supported |
| `badge_fee` | string/float | _optional:_ base registration/badge fee (in local currency) |


* * *


+ Attributes
    + header_year: "2020/2021" (string, required) - referenced year(s) (format: `YYYY` or `YYYY/YYYY+1`)
    + season_type_id: 1 (number, required) - associated SeasonType ID
    + edition: 12 (number, required) - edition number
    + edition_type_id: 2 (number, required) - associated EditionType ID
    + timing_type_id: 3 (number, required) - associated TimingType ID
    + description: "FIN SuperMaster 2020/2021" (string, required) - verbose description
    + begin_date: "2020-09-30" (string, required) - first day of the Season (format: `YYYY-MM-DD`)
    + end_date: "2021-05-30" (string, required) - last day of the Season (format: `YYYY-MM-DD`)
    + individual_rank (boolean, optional) - `true` if individual rankings are supported
    + badge_fee (number, required) - base registration/badge fee (in local currency)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"header_year": "2020/2021", "season_type_id": 1, "description": "FIN SuperMaster 2020/2021", \
                 "edition": 12, "edition_type_id": 2, "timing_type_id": 3, "begin_date": "2020-09-30", \
                 "end_date": "2021-05-30" }'
            "<API_HOST:PORT>/api/v3/season"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/season',
            {
                "header_year": "2020/2021",
                "season_type_id": 1,
                "description": "FIN SuperMaster 2020/2021",
                "edition": 12,
                "edition_type_id": 2,
                "timing_type_id": 3,
                "begin_date": "2020-09-30",
                "end_date": "2021-05-30"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "season_type_id": 1,
                "description": "FIN SuperMaster 2020/2021",
                "edition": 12,
                "edition_type_id": 2,
                "timing_type_id": 3,
                "begin_date": "2020-09-30",
                "end_date": "2021-05-30"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "season_type_id": 1,
                "description": "FIN SuperMaster 2020/2021",
                "edition": 12,
                "edition_type_id": 2,
                "timing_type_id": 3,
                "begin_date": "2020-09-30",
                "end_date": "2021-05-30"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "header_year": "2020/2021",
                "season_type_id": 1,
                "description": "FIN SuperMaster 2020/2021",
                "edition": 12,
                "edition_type_id": 2,
                "timing_type_id": 3,
                "begin_date": "2020-09-30",
                "end_date": "2021-05-30"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "header_year": "2020/2021",
                "season_type_id": 1,
                "description": "FIN SuperMaster 2020/2021",
                "edition": 12,
                "edition_type_id": 2,
                "timing_type_id": 3,
                "begin_date": "2020-09-30",
                "end_date": "2021-05-30"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Season list [/api/v3/seasons{?page,per_page,begin_date,end_date,season_type_id,header_year}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/seasons?page=1&edition=19>; rel=\"last\", <http://localhost:3000/api/v3/seasons?page=1&edition=19>; rel=\"next\""
            Total: 3
            Per-Page: 25
            Page: 1

    + Body

            [
                // Season details 1
                {
                    "id": 191,
                    // [...]
                },

                // Season details 2
                {
                    "id": 192,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Seasons associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `begin_date`
- `end_date`
- `season_type_id`
- `header_year`

Returns only *exact* matches; no fuzzy searches are performed.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + begin_date: `2019-10-01` (string, optional) - first day of the Season (use ISO format)
    + end_date: `2020-09-30` (string, optional) - last day of the Season (use ISO format)
    + season_type_id: 1 (number, optional) - associated SeasonType ID
    + header_year: `2019/2020` (string, optional) - referenced year(s) (format: YYYY or YYYY/YYYY+1)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/seasons?edition=19"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/seasons',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { edition: 19 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":191,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Season list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
