# Group Laps

## Lap details [/api/v3/lap/{id}]

+ Model (application/json)

        {
            "id": 1,
            "minutes": 1,
            "seconds": 17,
            "hundredths": 10,
            "meeting_program_id": 4672,
            "length_in_meters": 100,
            "reaction_time": null,
            "stroke_cycles": null,
            "underwater_seconds": null,
            "underwater_hundredths": null,
            "underwater_kicks": null,
            "breath_cycles": null,
            "position": null,
            "minutes_from_start": 1,
            "seconds_from_start": 17,
            "hundredths_from_start": 10,
            "meeting_individual_result_id": 101990,
            "swimmer_id": 23,
            "team_id": 1,
            "timing": "1'17\"10",
            "timing_from_start": "1'17\"10",

            "swimmer": {
                "id": 23,
                "complete_name": "LIGABUE MARCO",
                "last_name": "LIGABUE",
                "first_name": "MARCO",
                "year_of_birth": 1971,
                "year_guessed": false
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            },

            "team": {
                "id": 1,
                "name": "Lake Ramiro Swimming Club ASD",
                "editable_name": "Lake Ramiro Swimming Club ASD",
                "address": "9038 Littel Lights",
                "zip": "028088",
                "phone_mobile": "265-752-0508 x022",
                "phone_number": "493-278-0409",
                "fax_number": null,
                "e_mail": "zenaida@example.net",
                "contact_name": "Dede Sipes",
                "notes": "Meatloaf rump pork ribeye shank sirloin venison tongue.",
                "name_variations": null,
                "city_id": 37,
                "home_page_url": "http://watsica.us",
                "display_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
                "city_name": "Reggio nell Emilia, Reggio Emilia (IT)"
            },

            "meeting": {
                "id": 9204,
                "code": "riccione",
                "header_year": "2009",
                "display_label": "MASTER FIN: VI TROFEO CITTA' DI RICCIONE",
                "short_label": "VI CITTA' DI RICCIONE",
                "edition_label": "VI"
            },

            "meeting_program": {
                "id": 4672,
                "event_order": 3,
                "category_type_id": 439,
                "gender_type_id": 1,
                "autofilled": false,
                "out_of_race": false,
                "begin_time": null,
                "meeting_event_id": 312,
                "pool_type_id": 2,
                "standard_timing_id": null,
                "event_label": "800 FS",
                "category_label": "(2009/2010) M35",
                "category_code": "M35",
                "gender_code": "M",
                "pool_code": "50"
            },

            "event_type": {
                "id": 6,
                "code": "800SL",
                "length_in_meters": 800,
                "relay": false,
                "stroke_type_id": 1,
                "style_order": 6,
                "mixed_gender": false,
                "partecipants": 1,
                "phases": 1,
                "phase_length_in_meters": 800,
                "label": "800 FS",
                "long_label": "800 FREESTYLE",
                "alt_label": "800 FS"
            },
            "category_type": {
                "id": 439,
                "code": "M35",
                "federation_code": "D",
                "description": "MASTER 35",
                "short_name": "M35",
                "group_name": "MASTER",
                "age_begin": 35,
                "age_end": 39,
                "relay": false,
                "season_id": 92,
                "out_of_race": false,
                "undivided": false,
                "display_label": "M35, FIN MASTER 2009/2010",
                "short_label": "(2009/2010) M35"
            },

            "meeting_individual_result": {
                "id": 101990,
                "rank": 5,
                "play_off": false,
                "out_of_race": false,
                "disqualified": false,
                "standard_points": "763.06",
                "meeting_points": "0.0",
                "minutes": 11,
                "seconds": 19,
                "hundredths": 80,
                "meeting_program_id": 4672,
                "swimmer_id": 23,
                "team_id": 1,
                "badge_id": 4952,
                "disqualification_code_type_id": null,
                "goggle_cup_points": "1062.53",
                "reaction_time": "0.0",
                "team_points": "0.0",
                "team_affiliation_id": 222,
                "personal_best": false,
                "season_type_best": false,
                "timing": "11'19\"80",
                "swimmer_name": "LIGABUE MARCO",
                "swimmer_label": "LIGABUE MARCO (MAL, 1971)",
                "team_name": "Lake Ramiro Swimming Club ASD",
                "team_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                "event_label": "800 FS",
                "category_label": "(2009/2010) M35",
                "category_code": "M35",
                "gender_code": "M"
            }
        }


### find [GET]
The Lap instance matching the specified `id` returned as JSON.

The returned detailed result includes some of its parents and more: take a look at the structure aside for more details.

Some of the sub-entities (such as the GenderType) are duplicated in the hierachy tree for ease of reference.

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 9976 (number, required) - Lap ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/lap/9976"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/lap/9976',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":9976, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Lap details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for all the Lap fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Lap' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_individual_result_id` | integer | associated MeetingIndividualResult ID |
| `meeting_program_id` | integer | associated MeetingProgram ID |
| `team_id` | integer | associated Team ID |
| `swimmer_id` | integer | associated Swimmer ID |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `length_in_meters` | integer | lap length in meters |
| `minutes_from_start` | integer | overall minutes from heat start |
| `seconds_from_start` | integer | overall seconds from heat start |
| `hundredths_from_start` | integer | overall hundredths of second from heat start |
| `stroke_cycles` | integer | lap overall stroke cycles |
| `underwater_seconds` | integer | time spent underwater on turn/start, seconds |
| `underwater_hundredths` | integer | time spent underwater on turn/start, hundredths of a second |
| `underwater_kicks` | integer | underwater kicks after lap turn/start |
| `breath_cycles` | integer | lap overall breath cycles |
| `position` | integer | position in heat at the end of the lap |


* * *


+ Parameters
    + id: 9976 (number, required) - Lap ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"position": 3, "minutes": 0, "seconds": 39, "hundredths": 65 }' \
            "<API_HOST:PORT>/api/v3/lap/9976"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/lap/9976',
                payload: {
                    position: 3,
                    minutes: 0,
                    seconds: 30,
                    hundredths: 65
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "position": 3,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 65
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "position": 3,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 65
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "position": 3,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 65
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "position": 3,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 65
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "position": 3,
                "minutes": 0,
                "seconds": 30,
                "hundredths": 65
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new Lap, given the specified body parameters.

Association with MIR is optional to allow lap creation even before
the heat is over.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Lap' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_program_id` | integer | **required**, associated MeetingProgram ID |
| `team_id` | integer | **required**, associated Team ID |
| `swimmer_id` | integer | **required**, associated Swimmer ID |
| `meeting_individual_result_id` | integer | associated MeetingIndividualResult ID |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `length_in_meters` | integer | lap length in meters |
| `minutes_from_start` | integer | overall minutes from heat start |
| `seconds_from_start` | integer | overall seconds from heat start |
| `hundredths_from_start` | integer | overall hundredths of second from heat start |
| `stroke_cycles` | integer | lap overall stroke cycles |
| `underwater_seconds` | integer | time spent underwater on turn/start, seconds |
| `underwater_hundredths` | integer | time spent underwater on turn/start, hundredths of a second |
| `underwater_kicks` | integer | underwater kicks after lap turn/start |
| `breath_cycles` | integer | lap overall breath cycles |
| `position` | integer | position in heat at the end of the lap |


* * *


+ Attributes
    + meeting_program_id: 161956 (number, required) - associated MeetingProgram ID
    + team_id: 1 (number, required) - associated Team ID
    + swimmer_id: 23 (number, required) - associated Swimmer ID
    + meeting_individual_result_id: 834879 (number, optional) - associated MeetingIndividualResult ID
    + reaction_time (number, optional)
    + minutes: 1 (number, optional)
    + seconds: 15 (number, optional)
    + hundredths: 97 (number, optional)
    + length_in_meters: 150 (number, optional)
    + minutes_from_start (number, optional)
    + seconds_from_start (number, optional)
    + hundredths_from_start (number, optional)
    + stroke_cycles (number, optional)
    + underwater_seconds (number, optional)
    + underwater_hundredths (number, optional)
    + underwater_kicks (number, optional)
    + breath_cycles (number, optional)
    + position (number, optional)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"meeting_individual_result_id": 834879, "meeting_program_id": 168301, \
                 "team_id": 1, "swimmer_id": 23, "length_in_meters": 150, \
                 "position": 5, "minutes": 1, "seconds": 15, "hundredths": 97}'
            "<API_HOST:PORT>/api/v3/lap"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/lap',
            {
                "meeting_individual_result_id": 834879,
                "meeting_program_id": 168301,
                "team_id": 1,
                "swimmer_id": 23,
                "length_in_meters": 150,
                "position": 5,
                "minutes": 1,
                "seconds": 15,
                "hundredths": 97
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_individual_result_id": 834879,
                "meeting_program_id": 168301,
                "team_id": 1,
                "swimmer_id": 23,
                "length_in_meters": 150,
                "position": 5,
                "minutes": 1,
                "seconds": 15,
                "hundredths": 97
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "meeting_individual_result_id": 834879,
                "meeting_program_id": 168301,
                "team_id": 1,
                "swimmer_id": 23,
                "length_in_meters": 150,
                "position": 5,
                "minutes": 1,
                "seconds": 15,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "meeting_individual_result_id": 834879,
                "meeting_program_id": 168301,
                "team_id": 1,
                "swimmer_id": 23,
                "length_in_meters": 150,
                "position": 5,
                "minutes": 1,
                "seconds": 15,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "meeting_individual_result_id": 834879,
                "meeting_program_id": 168301,
                "team_id": 1,
                "swimmer_id": 23,
                "length_in_meters": 150,
                "position": 5,
                "minutes": 1,
                "seconds": 15,
                "hundredths": 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Lap' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 9983 (number, required) - Lap ID of the row that has to be deleted


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/lap/9983"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/lap/9983',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Lap list [/api/v3/laps{?page,per_page,meeting_individual_result_id,meeting_program_id,team_id,swimmer_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/laps?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/laps?page=2&team_id=1>; rel=\"next\""
            Total: 9275
            Per-Page: 25
            Page: 1

    + Body

            [
                // Lap details 1
                {
                    "id": 1,
                    // [...]
                },

                // Lap details 2
                {
                    "id": 2,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Laps associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `meeting_individual_result_id`
- `meeting_program_id`
- `team_id`
- `swimmer_id`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_program_id: 161956 (number, required) - associated MeetingProgram ID
    + team_id: 1 (number, required) - associated Team ID
    + swimmer_id: 23 (number, required) - associated Swimmer ID
    + meeting_individual_result_id: 834879 (number, optional) - associated MeetingIndividualResult ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/laps?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/laps',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Lap list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
