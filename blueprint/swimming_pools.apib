# Group SwimmingPools

## SwimmingPool details [/api/v3/swimming_pool/{id}]

+ Model (application/json)

        {
            "id": 1,
            "name": "S.Ferretti",
            "address": "Viale Melato",
            "zip": "",
            "nick_name": "reggioemiliasferretti25",
            "phone_number": null,
            "fax_number": null,
            "e_mail": null,
            "contact_name": null,
            "maps_uri": "",
            "lanes_number": 6,
            "multiple_pools": true,
            "garden": false,
            "bar": true,
            "restaurant": false,
            "gym": true,
            "child_area": true,
            "notes": null,
            "city_id": 37,
            "pool_type_id": 1,
            "shower_type_id": 4,
            "hair_dryer_type_id": 4,
            "locker_cabinet_type_id": 1,
            "read_only": true,
            "latitude": null,
            "longitude": null,
            "plus_code": "8FPGMJQW+Q4",
            "display_label": "S.Ferretti ('reggioemiliasferretti25', 25 M), Reggio nell Emilia, Reggio Emilia (IT)",
            "short_label": "S.Ferretti (25 M), Reggio nell Emilia",

            "city": {
                "id": 37,
                "name": "Reggio nell Emilia",
                "zip": "?",
                "area": "Reggio Emilia",
                "country": "Italy",
                "country_code": "IT",
                "latitude": "44.716667",
                "longitude": "10.6",
                "plus_code": "8FPGPH8X+MX",
                "display_label": "Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "Reggio nell Emilia, Reggio Emilia",
                "region": "Emilia-Romagna",
                "area_code": "RE"
            },
            "pool_code": "25",
            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },
            "shower_type": {
                "id": 4,
                "code": "B",
                "label": "BADGE",
                "long_label": "BADGE",
                "alt_label": "BADGE"
            },
            "hair_dryer_type": {
                "id": 4,
                "code": "B",
                "label": "BADGE",
                "long_label": "BADGE",
                "alt_label": "BADGE"
            },
            "locker_cabinet_type": {
                "id": 1,
                "code": "G",
                "label": "BIG",
                "long_label": "LOCKER (big)",
                "alt_label": "BIG"
            }
        }


### find [GET]
The SwimmingPool instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `User`, the `associated_user` for this SwimmingPool
- `PoolType`
    | _id_ | _code_ | _length_in_meters_ |
    | --- | --- | --- |
    | 1 | `25` | 25 |
    | 2 | `33` | 33 |
    | 3 | `50` | 50 |

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 51 (number, required) - SwimmingPool ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimming_pool/51"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimming_pool/51',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":51, ...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [SwimmingPool details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the SwimmingPool fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'SwimmingPool' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `name` | string | official name of the venue |
| `address` | string | address |
| `nick_name` | string | typically, "<CITY_NAME><POOL_NAME>", all lowercase, without common prefixes or suffixes (like "Pool") |
| `contact_name` | string | contact person name for main events or info |
| `phone_number` | string | service phone number for the pool venue |
| `e_mail` | string | contact e-mail for info on events or pool access |
| `maps_uri` | string | URI for online map |
| `pool_type_id` | integer | associated PoolType ID |
| | _id_ | _code: description_ |
| | 1 | `25`: 25 meters |
| | 2 | `33`: 33 meters |
| | 3 | `50`: 50 meters |
| `city_id` | integer | associated City ID |
| `lanes_number` | integer | max usable lanes of the pool during an event (typically ranging from 5..10) |
| `multiple_pools` | boolean | `true` if the venue has multiple pools available for events |
| `garden` | boolean | `true` if there's a garden area |
| `bar` | boolean | `true` if there's a bar |
| `restaurant` | boolean | `true` if there's an internal restauran |
| `gym` | boolean | `true` if there's an internal gym |
| `child_area` | boolean | `true` if there's an children area or nursery |
| `shower_type_id` | integer | associated ShowerType ID (*lookup entity*) |
| `hair_dryer_type_id` | integer | associated HairDryerType ID (*lookup entity*) |
| `locker_cabinet_type_id` | integer | associated LockerCabinetType ID (*lookup entity*) |
| `notes` | string | additional notes on the pool |
| `read_only` | boolean | `true` to disable further editing by automatic data-import procedure (Admin only) |

Each lookup entity has a standard JSON structure that includes localized labels for display (see below).

A call to `/lookup/:entity_name_plural/` endpoint will list all available values for a specific entity.

| _id_ | _code_ | _label_ | _long_label_ | _alt_label_ |
| --- | --- | --- | --- | --- |
| integer | short string | localized std label | localized long description | localized alt label |


* * *


+ Parameters
    + id: 1 (number, required) - SwimmingPool ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"name": "Ferretti/Ferrari", "nick_name": "reggioemiliaferretti25"}' \
            "<API_HOST:PORT>/api/v3/swimming_pool/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/swimming_pool/51',
                payload: {
                    name: "Ferretti/Ferrari", nick_name: "reggioemiliaferretti25",
                    pool_type_id: 1
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Ferretti/Ferrari",
                "nick_name": "reggioemiliaferretti25",
                "pool_type_id": 1
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Ferretti/Ferrari",
                "nick_name": "reggioemiliaferretti25",
                "pool_type_id": 1
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "name": "Ferretti/Ferrari",
                "nick_name": "reggioemiliaferretti25",
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "name": "Ferretti/Ferrari",
                "nick_name": "reggioemiliaferretti25",
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "name": "Ferretti/Ferrari",
                "nick_name": "reggioemiliaferretti25",
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new SwimmingPool, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `name` | string | official name of the venue |
| `nick_name` | string | typically, "<CITY_NAME><POOL_NAME>", all lowercase, without common prefixes or suffixes (like "Pool") |
| `city_id` | integer | associated City ID |
| `pool_type_id` | integer | associated PoolType ID |
| | _id_ | _code: description_ |
| | 1 | `25`: 25 meters |
| | 2 | `33`: 33 meters |
| | 3 | `50`: 50 meters |
| `address` | string | venue address |
| `contact_name` | string | contact person name for main events or info |
| `phone_number` | string | service phone number for the pool venue |
| `e_mail` | string | contact e-mail for info on events or pool access |
| `maps_uri` | string | URI for online map |
| `lanes_number` | integer | max usable lanes of the pool during an event (typically ranging from 5..10) |
| `multiple_pools` | boolean | `true` if the venue has multiple pools available for events |
| `garden` | boolean | `true` if there's a garden area |
| `bar` | boolean | `true` if there's a bar |
| `restaurant` | boolean | `true` if there's an internal restauran |
| `gym` | boolean | `true` if there's an internal gym |
| `child_area` | boolean | `true` if there's an children area or nursery |
| `shower_type_id` | integer | associated ShowerType ID (*lookup entity*) |
| `hair_dryer_type_id` | integer | associated HairDryerType ID (*lookup entity*) |
| `locker_cabinet_type_id` | integer | associated LockerCabinetType ID (*lookup entity*) |
| `notes` | string | additional notes on the pool |
| `read_only` | boolean | `true` to disable further editing by automatic data-import procedure |


Each lookup entity has a standard JSON structure that includes localized labels for display (see below).

A call to `/lookup/:entity_name_plural/` endpoint will list all available values for a specific entity.

| _id_ | _code_ | _label_ | _long_label_ | _alt_label_ |
| --- | --- | --- | --- | --- |
| integer | short string | localized std label | localized long description | localized alt label |


* * *


+ Attributes
    + name (string, optional) - official name of the venue
    + nick_name (string, optional) - venue nick-name
    + city_id (number, required) - associated City ID
    + pool_type_id (number, required) - associated PoolType ID
    + address (string, optional) - venue address
    + contact_name (string, optional) - contact person name for main events or info
    + phone_number (string, optional) - service phone number for the pool venue
    + e_mail (string, optional) - contact e-mail for info on events or pool access
    + maps_uri (string, optional) - URI for online map
    + lanes_number (number, optional) - max usable lanes of the pool during an event
    + multiple_pools (boolean, optional) - `true` if the venue has multiple pools available for events
    + garden (boolean, optional) - `true` if there's a garden area
    + bar (boolean, optional) - `true` if there's a bar
    + restaurant (boolean, optional) - `true` if there's an internal restauran
    + gym (boolean, optional) - `true` if there's an internal gym
    + child_area (boolean, optional) - `true` if there's an children area or nursery
    + shower_type_id (number, optional) - associated ShowerType ID (*lookup entity*)
    + hair_dryer_type_id (number, optional) - associated HairDryerType ID (*lookup entity*)
    + locker_cabinet_type_id (number, optional) - `true`associated LockerCabinetType ID (*lookup entity*)
    + notes (string, optional) - additional notes on the pool
    + read_only (boolean, optional) - `true` to disable further editing by automatic data-import procedure


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"name": "Nuova Piscina Girasole", "nick_name": "girasole25", \
                 "city_id": 142, "pool_type_id": 1}' \
            "<API_HOST:PORT>/api/v3/swimming_pool"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/swimming_pool',
            {
                "name": "Nuova Piscina Girasole",
                "nick_name": "girasole25",
                "city_id": 142,
                "pool_type_id": 1
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Nuova Piscina Girasole",
                "nick_name": "girasole25",
                "city_id": 142,
                "pool_type_id": 1
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "name": "Nuova Piscina Girasole",
                "nick_name": "girasole25",
                "city_id": 142,
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "name": "Nuova Piscina Girasole",
                "nick_name": "girasole25",
                "city_id": 142,
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Nuova Piscina Girasole",
                "nick_name": "girasole25",
                "city_id": 142,
                "pool_type_id": 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# SwimmingPool list [/api/v3/swimming_pools{?page,per_page,name,nick_name,address,pool_type_id,city_id,select2_format}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/swimming_pools?page=26&pool_type_id=1>; rel=\"last\", <http://localhost:3000/api/v3/swimming_pools?page=2&pool_type_id=1>; rel=\"next\""
            Total: 652
            Per-Page: 25
            Page: 1

    + Body

            [
                // SwimmingPool details 1
                {
                    "id": 1,
                    // [...]
                },

                // SwimmingPool details 2
                {
                    "id": 3,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of SwimmingPools associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `name`
- `nick_name`
- `address`
- `pool_type_id`
- `city_id`

Returns exact matches for `pool_type_id` & `city_id`;
supports partial matches for the address field, plus a FULLTEXT search
by the generic `name` parameter which acts on both the actual `name` &
`nick_name` fields.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


### Support for Select2 bespoke format output

Use the parameter `select2_format` => `true` to enable the simplified output
format used for the Select2 HTML widget (a list of `{id: ..., text: ...}`
rows under a single `results` node; see https://select2.org/data-sources/formats).

When this is enabled, results are limited to a _maximum_ of **100** rows (pagination ignored).


* * *


+ Parameters
    + name: `Ferrari` (string, optional) - official name of the venue; full-text search
    + nick_name: `comunalemelato50` (string, optional) - internal nickname of the venue; partial match supported
    + address: `Melato` (string, optional) - address of the venue; partial match
    + pool_type_id: 1 (number, optional) - associated PoolType ID
    + city_id: 1 (number, optional) - associated CityType ID
    + select2_format: false (boolean, optional) - `true` to enable the bespoke Select2 simplified output format
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimming_pools?pool_type_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimming_pools',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { pool_type_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [SwimmingPool list][]


+ Request Select2 ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimming_pools?pool_type_id=1&select2_format=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimming_pools',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { pool_type_id: 1, select2_format: true }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    + Body

            {
                "results": [
                    // SwimmingPool details 1
                    {
                        "id": 1,
                        "text": "Comunale O.Ferrari (m.50, Reggio Emilia)"
                    },

                    // SwimmingPool details 2
                    {
                        "id": 2,
                        "text": ...
                    },

                    // [...]
                ]
            }


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
