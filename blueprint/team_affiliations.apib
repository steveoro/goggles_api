# Group TeamAffiliations

## TeamAffiliation details [/api/v3/team_affiliation/{id}]

+ Model (application/json)

        {
            "id": 5727,
            // [...]
            "number": "04200002",
            "name": "CSInuoto OberFerrari",
            "compute_gogglecup": true,
            "team_id": 1,
            "season_id": 191,
            // [...]
            "created_at": "2019-10-16T00:00:00.000Z",
            "updated_at": "2019-10-16T00:00:00.000Z",
            "autofilled": false,

            // Embedded associated Team:
            "team": {
                "id": 1,
                // [...]
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "CSI NUOTO OBER FERRARI ASD",
                "address": "Team HQ address",
                "zip": "",
                "phone_mobile": "",
                "phone_number": "",
                "fax_number": null,
                "e_mail": "contact.email@this.is.just.a.fake.domain.com",
                "contact_name": "Marco Ligabue",
                "notes": "whatever the team manager needs to write here",
                "created_at": "2014-10-19T00:00:00.000Z",
                "updated_at": "2019-02-17T10:26:36.000Z",
                "name_variations": null,
                "city_id": 37,
                "home_page_url": "",

                // City details:
                "city": {
                    "id": 37,
                    "name": "Reggio nell Emilia",
                    "zip": "?",
                    "area": "Reggio Emilia",
                    "country": "Italy",
                    "country_code": "IT",
                    "latitude": "44.716667",
                    "longitude": "10.6",
                    "region": "Emilia-Romagna",
                    "area_code": "RE"
                }
            },

            // Embedded associated Season:
            "season": {
                "id": 191,
                "lock_version": 0,
                "description": "Circuito regionale Emilia master CSI 2019/2020",
                "begin_date": "2019-10-01",
                "end_date": "2020-09-30",
                "season_type_id": 2,
                "created_at": "2019-10-16T07:20:51.000Z",
                "updated_at": "2019-10-16T07:20:51.000Z",
                "header_year": "2019/2020",
                "edition": 20,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "has_individual_rank": true,
                "badge_fee": "10.0"
            },

            // All Badges beloging to any year found in between
            // associated Season's `begin_date.year`..`end_date.year`:
            "badges": [
                {
                    "id": 124947,
                    "lock_version": 0,
                    "number": "04204788",
                    "season_id": 191,
                    "team_affiliation_id": 142,
                    "team_id": 1,
                    "category_type_id": 1320,
                    "user_id": 1,
                    "created_at": "2019-10-16T00:00:00.000Z",
                    "updated_at": "2019-10-16T00:00:00.000Z",
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5727,
                    "final_rank": null,
                    "off_gogglecup": false,
                    "fees_due": false,
                    "badge_due": false,
                    "relays_due": false
                },
                // [...season 191 badges...]
            ],

            // All embedded Team Managers for the associated Season:
            "managers": [
                            {
                                "id": 2,
                                "name": "leega",
                                "description": "Marco Ligabue",
                                "swimmer_id": 23,
                                "created_at": "2013-10-23T17:10:02.000Z",
                                "updated_at": "2020-09-16T09:03:49.000Z",
                                // [...]
                                "last_name": "Ligabue",
                                "first_name": "Marco",
                                // [...remaning User details...]
                            }
                        ]
        }


### find [GET]
The TeamAffiliation instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `Team`
- `Season`
- `Badge`: _full list_ from the associated Season
- `User` / Manager: _full list_ from the associated Season

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 5727 (number, required) - TeamAffiliation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team_affiliation/5727"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/team_affiliation/5727',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":5727, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [TeamAffiliation details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the TeamAffiliation fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'TeamAffiliation' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `team_id` | integer | associated Team ID |
| `season_id` | integer | associated Season ID |
| `name` | string | name as it appears in the registration rooster for the Championship Season |
| `number` | string | enrollment or registration badge number |
| `compute_gogglecup` | boolean | `true` when a bespoke GoggleCup has to be computed |


* * *


+ Parameters
    + id: 5727 (number, required) - TeamAffiliation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"name": "C.S.I. Ober Ferrari", \
                 "number": "EMI 123456"}' \
            "<API_HOST:PORT>/api/v3/team_affiliation/5727"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/team_affiliation/5727',
                payload: {
                    name: "C.S.I. Ober Ferrari",
                    number: "EMI 123456"
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "team_id": 1,
                "season_id": 191,
                "name": "C.S.I. Ober Ferrari",
                "number": "EMI 123456",
                "compute_gogglecup": true
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "team_id": 1,
                "season_id": 191,
                "name": "C.S.I. Ober Ferrari",
                "number": "EMI 123456",
                "compute_gogglecup": true
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "team_id": 1,
                "season_id": 191,
                "name": "C.S.I. Ober Ferrari",
                "number": "EMI 123456",
                "compute_gogglecup": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "team_id": 1,
                "season_id": 191,
                "name": "C.S.I. Ober Ferrari",
                "number": "EMI 123456",
                "compute_gogglecup": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "team_id": 1,
                "season_id": 191,
                "name": "C.S.I. Ober Ferrari",
                "number": "EMI 123456",
                "compute_gogglecup": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


### create [POST]

Creates a new TeamAffiliation, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `team_id` | integer | **required**, associated Team ID |
| `season_id` | integer | **required**, associated Season ID |
| `name` | string | name as it appears in the registration rooster for the Championship Season |
| `number` | string | enrollment or registration badge number |
| `compute_gogglecup` | boolean | `true` when a bespoke GoggleCup has to be computed |


* * *


+ Attributes
    + team_id (number, required) - associated Team ID
    + season_id (number, required) - associated Season ID
    + name (string, optional) - Team registration name
    + number (string, optional) - enrollment code or Team registration badge number
    + compute_gogglecup (boolean, optional) - `true` when the customized GoggleCup has to be computed


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"team_id": 1, "season_id": 194, "compute_gogglecup": "true"}' \
            "<API_HOST:PORT>/api/v3/team_affiliation"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/team_affiliation',
            {
                'team_id': 1,
                'season_id': 194,
                'compute_gogglecup': true
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'compute_gogglecup': true
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'compute_gogglecup': true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'compute_gogglecup': true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'compute_gogglecup': true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


# TeamAffiliation list [/api/v3/team_affiliations{?page,per_page,team_id,season_id,name,number,compute_gogglecup}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/team_affiliations?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/team_affiliations?page=2&team_id=1>; rel=\"next\""
            Total: 46
            Per-Page: 25
            Page: 1

    + Body

            [
                // TeamAffiliation details 1
                {
                    "id": 1,
                    // [...]
                },

                // TeamAffiliation details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of TeamAffiliations associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `team_id`
- `season_id`
- `name`
- `number`
- `compute_gogglecup`

Returns exact matches for most of the parameters, supports partial matches just for the text name,
but no fuzzy searches are performed: the matching rows for the name strings
are selected using a simple "LIKE %?%" on the specified parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + team_id: 1 (number, optional) - associated Team ID
    + season_id: 191 (number, optional) - associated Season ID
    + name: `Ober Ferrari` (string, optional) - enrollment name (partial match supported)
    + number: `04200002` (string, optional) - enrollment number or Team badge code
    + compute_gogglecup: false (boolean, optional) - `true` when year of birth has been deduced from other data
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team_affiliations?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/team_affiliations',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [TeamAffiliation list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
