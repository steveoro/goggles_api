# Group MeetingPrograms

## MeetingProgram details [/api/v3/meeting_program/{id}]

+ Model (application/json)

        {
            "id": 1,
            "lock_version": 0,
            "event_order": 1,
            "category_type_id": 4,
            "gender_type_id": 1,
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2014-10-19T00:00:00.000Z",
            "autofilled": false,
            "out_of_race": false,
            "begin_time": null,
            "meeting_event_id": 1230,
            "pool_type_id": 1,
            "time_standard_id": null,

            "meeting_event": {
                "id": 1230,
                "event_order": 1,
                "begin_time": "2000-01-01T00:00:00.000Z",
                "out_of_race": false,
                "autofilled": false,
                "notes": null,
                "meeting_session_id": 1,
                "event_type_id": 19,
                "heat_type_id": 3,
                "split_gender_start_list": true,
                "split_category_start_list": false,
                "event_type": {
                    "id": 19,
                    "code": "50RA",
                    "length_in_meters": 50,
                    "relay": false,
                    "stroke_type_id": 4,
                    "style_order": 19,
                    "mixed_gender": false,
                    "partecipants": 1,
                    "phases": 1,
                    "phase_length_in_meters": 50,
                    "label": "50 BS",
                    "long_label": "50 BREASTROKE",
                    "alt_label": "50 BS"
                },
                "pool_type": {
                    "id": 1,
                    "code": "25",
                    "length_in_meters": 25,
                    "eventable": true,
                    "label": "25 M",
                    "long_label": "25 METERS",
                    "alt_label": "25 M"
                },
                "stroke_type": {
                    "id": 4,
                    "code": "RA",
                    "eventable": true,
                    "label": "BR",
                    "long_label": "BREASTROKE",
                    "alt_label": "BS"
                },
                "heat_type": {
                    "id": 3,
                    "code": "F",
                    "default": false,
                    "label": "FN",
                    "long_label": "FINALS",
                    "alt_label": "FN"
                }
            },

            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },
            "event_type": {
                "id": 19,
                "code": "50RA",
                "length_in_meters": 50,
                "relay": false,
                "stroke_type_id": 4,
                "style_order": 19,
                "mixed_gender": false,
                "partecipants": 1,
                "phases": 1,
                "phase_length_in_meters": 50,
                "label": "50 BS",
                "long_label": "50 BREASTROKE",
                "alt_label": "50 BS"
            },
            "category_type": {
                "id": 4,
                "code": "M25",
                "federation_code": "3",
                "description": "MASTER 25",
                "short_name": "M25",
                "group_name": "MASTER",
                "age_begin": 25,
                "age_end": 29,
                "relay": false,
                "season_id": 1,
                "out_of_race": false,
                "undivided": false
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            },
            "stroke_type": {
                "id": 4,
                "code": "RA",
                "eventable": true,
                "label": "BR",
                "long_label": "BREASTROKE",
                "alt_label": "BS"
            },

            // List of all associated individual results:
            "meeting_individual_results": [
                {
                    "id": 19917,
                    "rank": 5,
                    "play_off": false,
                    "out_of_race": false,
                    "disqualified": false,
                    "standard_points": "0.0",
                    "meeting_points": "60.0",
                    "minutes": 0,
                    "seconds": 43,
                    "hundredths": 71,
                    "meeting_program_id": 1,
                    "swimmer_id": 47,
                    "team_id": 4,
                    "badge_id": 47,
                    "disqualification_code_type_id": null,
                    "goggle_cup_points": "0.0",
                    "reaction_time": "0.0",
                    "team_points": "3.0",
                    "team_affiliation_id": 3,
                    "personal_best": false,
                    "season_type_best": false,
                    "swimmer": {
                        "id": 47,
                        "last_name": "Pacocha",
                        "first_name": "Christa",
                        "year_of_birth": 1960,
                        "phone_mobile": null,
                        "phone_number": null,
                        "e_mail": "Christa.Pacocha-205@fake.example.com",
                        "nickname": "Christ the Wolverine",
                        "associated_user_id": null,
                        "gender_type_id": 2,
                        "complete_name": "Pacocha Christa 87497",
                        "year_guessed": false,
                        "associated_user": null,
                        "gender_type": {
                            "id": 2,
                            "code": "F",
                            "label": "FEM",
                            "long_label": "FEMALE",
                            "alt_label": "FEMALE"
                        }
                    },
                    "team_affiliation": {
                        "id": 3,
                        "number": "",
                        "name": "STELLA AZZURRA MO",
                        "compute_gogglecup": false,
                        "team_id": 4,
                        "season_id": 1,
                        "autofilled": false
                    },
                    "disqualification_code_type": null
                },
                {
                    "id": 19923,
                    "rank": 2,
                    "play_off": false,
                    "out_of_race": false,
                    "disqualified": false,
                    "standard_points": "0.0",
                    "meeting_points": "90.0",
                    "minutes": 0,
                    "seconds": 37,
                    "hundredths": 80,
                    "meeting_program_id": 1,
                    "swimmer_id": 18,
                    "team_id": 4,
                    "badge_id": 18,
                    "disqualification_code_type_id": null,
                    "goggle_cup_points": "0.0",
                    "reaction_time": "0.0",
                    "team_points": "8.0",
                    "team_affiliation_id": 3,
                    "personal_best": true,
                    "season_type_best": false,
                    "swimmer": {
                        "id": 18,
                        "last_name": "Baumbach",
                        "first_name": "Lina",
                        "year_of_birth": 1993,
                        "phone_mobile": null,
                        "phone_number": null,
                        "e_mail": "Lina.Baumbach-67@fake.example.org",
                        "nickname": "Lina the Fox",
                        "associated_user_id": null,
                        "gender_type_id": 2,
                        "complete_name": "Baumbach Lina 75778",
                        "year_guessed": false,
                        "associated_user": null,
                        "gender_type": {
                            "id": 2,
                            "code": "F",
                            "label": "FEM",
                            "long_label": "FEMALE",
                            "alt_label": "FEMALE"
                        }
                    },
                    "team_affiliation": {
                        "id": 3,
                        "number": "",
                        "name": "STELLA AZZURRA MO",
                        "compute_gogglecup": false,
                        "team_id": 4,
                        "season_id": 1,
                        "autofilled": false
                    },
                    "disqualification_code_type": null
                },

                // ...Remaining individual results...
            ]
        }


### find [GET]
The MeetingProgram instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `MeetingEvent`
- `PoolType`
- `EventType`
- `CategoryType`
- `GenderType`
- `StrokeType`
- `MeetingIndividualResult` (all associated rows + sub-entities)

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 1 (number, required) - MeetingProgram ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_program/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_program/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingProgram details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


## edit [PUT]

Allows direct updates for most of the MeetingProgram fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `event_order` | Integer | ordinal number of this program |
| `category_type_id` | Integer | link to CategoryType |
| `gender_type_id` | Integer | link to GenderType |
| `begin_time` | String | begin time for this program (parsed with Time.zone, based on year 2000) |
| `autofilled` | Boolean | true if the fields have been filled-in by the data-import procedure (may need revision) |
| `out_of_race` | Boolean | true if this program does not concur in the overall rankings or scores |
| `meeting_event_id` | Integer | link to MeetingEvent |
| `pool_type_id` | Integer | link to PoolType |


* * *


+ Parameters
    + id: 10 (number, required) - MeetingProgram ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"event_order": 5, "day": "out_of_race": false}' \
            "<API_HOST:PORT>/api/v3/meeting_program/10"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_program/10',
                payload: {
                    event_order: 5,
                    out_of_race: false
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "event_order": 5,
                "out_of_race": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "event_order": 5,
                "out_of_race": false
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "event_order": 5,
                "out_of_race": false
            }


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingProgram list [/api/v3/meeting_programs{?page,per_page,meeting_id,meeting_session_id,meeting_event_id,category_type_id,gender_type_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_programs?page=2&meeting_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meeting_programs?page=2&team_id=1>; rel=\"next\""
            Total: 30
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingProgram details 1
                {
                    "id": 1,
                    // [...]
                },

                // MeetingProgram details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of MeetingPrograms associated to the specified filtering values,
returned as JSON and filtered by :

- `meeting_id` (**required**)
- `meeting_session_id`
- `meeting_event_id`
- `category_type_id`
- `gender_type_id`

Returns the exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_id: 1 (number, required) - associated Meeting ID
    + meeting_session_id: 1 (number, optional) - associated MeetingSession ID
    + meeting_event_id: 1 (number, optional) - associated MeetingEvent ID
    + category_type_id: 1 (number, optional) - associated CategoryType ID
    + gender_type_id: 1 (number, optional) - associated GenderType ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_programs?meeting_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_programs',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { meeting_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingProgram list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
