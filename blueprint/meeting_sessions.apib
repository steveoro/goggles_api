# Group MeetingSessions

## MeetingSession details [/api/v3/meeting_session/{id}]

+ Model (application/json)

        {
            "id": 3312,
            "session_order": 2,
            "scheduled_date": "2020-04-19",
            "warm_up_time": "2000-01-01T13:00:00.000Z",
            "begin_time": "2000-01-01T14:00:00.000Z",
            "notes": null,
            "meeting_id": 19315,
            "swimming_pool_id": 26,
            "description": "FINALS",
            "autofilled": true,
            "day_part_type_id": 3,

            "meeting": {
                "id": 19315,
                "code": "molinella",
                "header_year": "2019/2020",
                "display_label": "MASTER FIN: XIX Trofeo Città  di Molinella",
                "short_label": "XIX Città  di Molinella",
                "edition_label": "XIX"
            },

            "swimming_pool": {
                "id": 26,
                "name": "Comunale",
                "address": "Via Andrea Costa",
                "zip": "",
                "nick_name": "molinella25",
                "phone_number": null,
                "fax_number": null,
                "e_mail": null,
                "contact_name": null,
                "maps_uri": "",
                "lanes_number": 6,
                "multiple_pools": false,
                "garden": false,
                "bar": false,
                "restaurant": false,
                "gym": false,
                "child_area": false,
                "notes": null,
                "city_id": 27,
                "pool_type_id": 1,
                "shower_type_id": 1,
                "hair_dryer_type_id": null,
                "locker_cabinet_type_id": 2,
                "read_only": true,
                "latitude": null,
                "longitude": null,
                "plus_code": null,
                "display_label": "Comunale ('molinella25', 25 M), Molinella, Bologna (IT)",
                "short_label": "Comunale (25 M), Molinella"
            },

            "day_part_type": {
                "id": 3,
                "code": "S",
                "label": "EVE",
                "long_label": "EVENING",
                "alt_label": "EVE"
            },
            "season": {
                "id": 192,
                "description": "Circuito italiano supermaster FIN 2019/2020",
                "begin_date": "2019-10-01",
                "end_date": "2020-09-30",
                "season_type_id": 1,
                "header_year": "2019/2020",
                "edition": 19,
                "edition_type_id": 5,
                "timing_type_id": 3,
                "rules": null,
                "individual_rank": true,
                "badge_fee": "24.0",
                "display_label": "MASTER FIN 2019/2020",
                "short_label": "FIN 2019/2020"
            },
            "season_type": {
                "id": 1,
                "code": "MASFIN",
                "description": "CIRCUITO ITALIANO MASTER FIN",
                "short_name": "MASTER FIN",
                "federation_type_id": 1
            },
            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },

            "meeting_events": [
                {
                    "id": 20122,
                    "event_order": 9,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 4,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 9. 200 FS",
                    "short_label": "200 FS"
                },
                {
                    "id": 20123,
                    "event_order": 10,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 12,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 10. 100 BF",
                    "short_label": "100 BF"
                },
                {
                    "id": 20124,
                    "event_order": 11,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 2,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 11. 50 FS",
                    "short_label": "50 FS"
                },
                {
                    "id": 20125,
                    "event_order": 12,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 13,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 12. 200 BF",
                    "short_label": "200 BF"
                },
                {
                    "id": 20126,
                    "event_order": 13,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 22,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 13. 100 IM",
                    "short_label": "100 IM"
                },
                {
                    "id": 20127,
                    "event_order": 14,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 5,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 14. 400 FS",
                    "short_label": "400 FS"
                },
                {
                    "id": 20128,
                    "event_order": 15,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 11,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 15. 50 BF",
                    "short_label": "50 BF"
                },
                {
                    "id": 20129,
                    "event_order": 16,
                    "begin_time": null,
                    "out_of_race": false,
                    "autofilled": true,
                    "notes": null,
                    "meeting_session_id": 3312,
                    "event_type_id": 3,
                    "heat_type_id": 3,
                    "split_gender_start_list": true,
                    "split_category_start_list": false,
                    "display_label": "XIX Città  di Molinella (25 M): 16. 100 FS",
                    "short_label": "100 FS"
                }
            ]
        }


### find [GET]
The MeetingSession instance matching the specified `id` returned as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 3314 (number, required) - MeetingSession ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_session/3314"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_session/3314',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":3314, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingSession details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the MeetingSession fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `scheduled_date` | string | schedule date for this session of the Meeting in ISO format |
| `session_order` | integer | numerical order of the session, starting from 1 |
| `description` | string | description of the session |
| `warm_up_time` | string | warm-up hour for this session in ISO format (HH:MM) |
| `begin_time` | string | event start hour for this session in ISO format (HH:MM) |
| `notes` | string | free text notes |
| `meeting_id` | integer | associated Meeting ID |
| `swimming_pool_id` | integer | associated SwimmingPool ID |
| `day_part_type_id` | integer | associated DayPartType ID (morning, afternoon, evening) |
| | _id_ | _code: description_ |
| | 1 | `M`: morning |
| | 2 | `P`: afternoon |
| | 3 | `S`: evening |
| | 4 | `N`: night |
| `autofilled` | boolean | `true` if the values were autofilled by the data-import procedure |


* * *


+ Parameters
    + id: 3314 (number, required) - MeetingSession ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"session_order": 2, "day_part_type_id": 2 }' \
            "<API_HOST:PORT>/api/v3/meeting_session/3314"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_session/3314',
                payload: {
                    "session_order": 2,
                    "day_part_type_id": 2
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "session_order": 2,
                "day_part_type_id": 2
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "session_order": 2,
                "day_part_type_id": 2
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "session_order": 2,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "session_order": 2,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "session_order": 2,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingSession, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

Same attributes as `PUT /meeting_session`, all optional except `scheduled_date`, `meeting_id`,
`session_order` and `description` which are *required* (`id` not needed when creating rows).


* * *


+ Attributes
    + scheduled_date: `2019-11-23` (string, required) - schedule date for this session of the Meeting in ISO format
    + meeting_id: 19318 (number, required) - associated Meeting ID
    + session_order: 2 (number, required) - numerical order of the session, starting from 1
    + description: `Finals` (string, required) - description of the session
    + warm_up_time: `13:30` (string, optional) - warm-up hour for this session in ISO format (HH:MM)
    + begin_time: `14:00` (string, optional) - event start hour for this session in ISO format (HH:MM)
    + notes: `only 1 session per athlete allowed due to covid restrictions` (string, optional) - free text notes
    + swimming_pool_id: 199 (number, optional) - associated SwimmingPool ID
    + day_part_type_id: 2 (number, optional) - associated DayPartType ID (1: morning, 2: afternoon, 3: evening, 4: night)
    + autofilled (boolean, optional) - `true` if the values were autofilled by the data-import procedure


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"scheduled_date": "2019-11-23", "meeting_id": 19318, "session_order": 2, \
                 "description": "Finals", "warm_up_time": "13:30", "begin_time": "14:00", \
                 "notes": "only 1 session per athlete allowed due to covid restrictions", \
                 "swimming_pool_id": 199, "day_part_type_id": 2 }' \
            "<API_HOST:PORT>/api/v3/meeting_session"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_session',
            {
                "scheduled_date": "2019-11-23",
                "meeting_id": 19318,
                "session_order": 2,
                "description": "Finals",
                "warm_up_time": "13:30",
                "begin_time": "14:00",
                "notes": "only 1 session per athlete allowed due to covid restrictions",
                "swimming_pool_id": 199,
                "day_part_type_id": 2
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "scheduled_date": "2019-11-23",
                "meeting_id": 19318,
                "session_order": 2,
                "description": "Finals",
                "warm_up_time": "13:30",
                "begin_time": "14:00",
                "notes": "only 1 session per athlete allowed due to covid restrictions",
                "swimming_pool_id": 199,
                "day_part_type_id": 2
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "scheduled_date": "2019-11-23",
                "meeting_id": 19318,
                "session_order": 2,
                "description": "Finals",
                "warm_up_time": "13:30",
                "begin_time": "14:00",
                "notes": "only 1 session per athlete allowed due to covid restrictions",
                "swimming_pool_id": 199,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "scheduled_date": "2019-11-23",
                "meeting_id": 19318,
                "session_order": 2,
                "description": "Finals",
                "warm_up_time": "13:30",
                "begin_time": "14:00",
                "notes": "only 1 session per athlete allowed due to covid restrictions",
                "swimming_pool_id": 199,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "scheduled_date": "2019-11-23",
                "meeting_id": 19318,
                "session_order": 2,
                "description": "Finals",
                "warm_up_time": "13:30",
                "begin_time": "14:00",
                "notes": "only 1 session per athlete allowed due to covid restrictions",
                "swimming_pool_id": 199,
                "day_part_type_id": 2
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 3314 (number, required) - MeetingSession ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_session/3314"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_session/3314',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingSession list [/api/v3/meeting_sessions{?page,per_page,scheduled_date,meeting_id,autofilled}]

+ Model (application/json)

    + Header

            Total: 2
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingSession details 1
                {
                    "id": 3313,
                    // [...]
                },

                // MeetingSession details 2
                {
                    "id": 3314,
                    // [...]
                }
            ]


## list [GET]

The list of MeetingSessions associated to the specified filtering values,
returned as JSON and optionally filtered by:

- `meeting_id`
- `scheduled_date`
- `autofilled`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_id: 19318 (number, optional) - associated Meeting ID
    + scheduled_date: "2019-11-23" (string, optional) - schedule date for this session of the Meeting in ISO format
    + autofilled: false (boolean, optional) - `true` if the values were autofilled by the data-import procedure

    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_sessions?meeting_id=19318"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_sessions',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { meeting_id: 19318 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":3313,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingSession list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
