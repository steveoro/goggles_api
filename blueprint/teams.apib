# Group Teams

## Team details [/api/v3/team/{id}]

+ Model (application/json)

        {
            "id": 1,
            "name": "CSI NUOTO OBER FERRARI ASD",
            "editable_name": "CSI NUOTO OBER FERRARI ASD",
            "address": "Team HQ address",
            "zip": "",
            "phone_mobile": "",
            "phone_number": "",
            "fax_number": null,
            "e_mail": "contact.email@example.com",
            "contact_name": "Marco Ligabue",
            "notes": "whatever the team manager needs to write here",
            "name_variations": null,
            "city_id": 37,
            "home_page_url": "",
            "display_label": "CSI NUOTO OBER FERRARI ASD, Reggio nell Emilia, Reggio Emilia (IT)",
            "short_label": "CSI NUOTO OBER FERRARI ASD, Reggio nell Emilia",

            // Embedded associated City:
            "city": {
                "id": 37,
                // [...]
                "name": "REGGIO NELL'EMILIA",
                "zip": "?",
                "area": "REGGIO EMILIA",
                "country": "Italy",
                "country_code": "ITA",
                // [...]
            },

            // "Recent Badges" found from last 2 most recent Seasons:
            // (as of this writing, season 191 & season 192)
            "badges": [
                {
                    "id": 124914,
                    "number": "43446",
                    "season_id": 192,
                    "team_id": 142,
                    "team_id": 1,
                    "category_type_id": 1293,
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5726,
                    "final_rank": null,
                    "off_gogglecup": false,
                    "fees_due": true,
                    "badge_due": false,
                    "relays_due": true
                    // [...see badges API for more details...]
                },
                // [...all season 192 badges...]
                {
                    "id": 124947,
                    "number": "04204788",
                    "season_id": 191,
                    "team_id": 142,
                    "team_id": 1,
                    "category_type_id": 1320,
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5727,
                    "final_rank": null,
                    "off_gogglecup": false,
                    "fees_due": false,
                    "badge_due": false,
                    "relays_due": false
                    // [...]
                },
                // [...all season 191 badges...]
            ],

            // Last 2 most recent affiliations (as of this writing, season 191 & season 192):
            "team_affiliations": [
                {
                    "id": 5727,
                    // [...]
                    "number": "04200002",
                    "name": "CSInuoto OberFerrari",
                    "compute_gogglecup": true,
                    "team_id": 1,
                    "season_id": 191,
                    "autofilled": false,
                    // [...remaining TeamAffiliation details...]
                },
                {
                    "id": 5726,
                    // [...]
                    "number": "46103",
                    "name": "CSI NUOTO OBER FERRARI",
                    "compute_gogglecup": true,
                    "team_id": 1,
                    "season_id": 192,
                    "autofilled": false,
                    // [...remaining TeamAffiliation details...]
                }
            ]
        }


### find [GET]
The Team instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `City`
- `TeamAffiliation`, list of rows found for the last 2 most recent Seasons (given there's any association dating back as far as 1 year)
- `Badge`, as above, list of rows found for the selected TeamAffiliations

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 1 (number, required) - Team ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/team/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/team/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1, ...">
    ```

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Team details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the Team fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Team' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `name` | string | name of the Team (typically, read-only, imported/detected "as-is") |
| `editable_name` | string | name of the Team, as edited by the Team Manager |
| `city_id` | integer | associated City ID |
| `address` | string | Team HQ address |
| `zip` | string | Team HQ zip code |
| `phone_mobile` | string | HQ mobile or secondary phone |
| `phone_number` | string | HQ official phone number |
| `contact_name` | string | official contact name |
| `e_mail` | string | team contact e-mail |
| `notes` | string | additional notes by the Team Manager |
| `home_page_url` | string | Team Website URL |


* * *


+ Parameters
    + id: 1 (number, required) - Team ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.", \
                 "city_id": 37}' \
            "<API_HOST:PORT>/api/v3/team/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/team/142',
                payload: {
                    editable_name: "C.S.I. NUOTO Ober Ferrari A.S.D.",
                    city_id: 37
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.",
                "city_id": 37,
                "address": "Via Agosti, 6",
                "contact_name": "Marco Ligabue"
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.",
                "city_id": 37,
                "address": "Via Agosti, 6",
                "contact_name": "Marco Ligabue"
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.",
                "city_id": 37,
                "address": "Via Agosti, 6",
                "contact_name": "Marco Ligabue"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.",
                "city_id": 37,
                "address": "Via Agosti, 6",
                "contact_name": "Marco Ligabue"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "C.S.I. NUOTO Ober Ferrari A.S.D.",
                "city_id": 37,
                "address": "Via Agosti, 6",
                "contact_name": "Marco Ligabue"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new Team, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `name` | string | name of the Team (typically, read-only, imported/detected "as-is") |
| `editable_name` | string | name of the Team, as edited by the Team Manager |
| `city_id` | integer | associated City ID |
| `address` | string | Team HQ address |
| `zip` | string | Team HQ zip code |
| `phone_mobile` | string | HQ mobile or secondary phone |
| `phone_number` | string | HQ official phone number |
| `contact_name` | string | official contact name |
| `e_mail` | string | team contact e-mail |
| `notes` | string | additional notes by the Team Manager |
| `home_page_url` | string | Team Website URL |


* * *


+ Attributes
    + name (string, optional) - name of the team (typically, read-only, imported/detected "as-is")
    + editable_name (string, optional) - name of the team, as edited by the Team Manager
    + city_id (number, required) - associated City ID
    + address (string, optional) - Team HQ address
    + zip (string, optional) - Team HQ zip code
    + phone_mobile (string, optional) - HQ mobile or secondary phone
    + phone_number (string, optional) - HQ official phone number
    + contact_name (string, optional) - official contact name
    + e_mail (string, optional) - team contact e-mail
    + notes (string, optional) - additional notes by the Team Manager
    + home_page_url (string, optional) - Team Website URL


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"name": "SuperDuper AquaTeam", "editable_name": "SuperDuper Aqua-Team 2020"}' \
            "<API_HOST:PORT>/api/v3/team"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/team',
            {
                "name": "SuperDuper AquaTeam",
                "editable_name": "SuperDuper Aqua-Team 2020"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "SuperDuper AquaTeam",
                "editable_name": "SuperDuper Aqua-Team 2020"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "name": "SuperDuper AquaTeam",
                "editable_name": "SuperDuper Aqua-Team 2020"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "name": "SuperDuper AquaTeam",
                "editable_name": "SuperDuper Aqua-Team 2020"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "SuperDuper AquaTeam",
                "editable_name": "SuperDuper Aqua-Team 2020"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Team list [/api/v3/teams{?page,per_page,city_id,name,select2_format}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/teams?page=1&city_id=1>; rel=\"last\", <http://localhost:3000/api/v3/teams?page=1&city_id=1>; rel=\"next\""
            Total: 5
            Per-Page: 25
            Page: 1

    + Body

            [
                // Team details 1
                {
                    "id": 1,
                    // [...]
                },

                // Team details 2
                {
                    "id": 14,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Teams associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `city_id`
- `name`

Returns exact matches for `city_id`; supports FULLTEXT search for the generic
`name` parameter which acts on all name-related fields (`name`, `editable_name` & `name_variations`).

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


### Support for Select2 bespoke format output

Use the parameter `select2_format` => `true` to enable the simplified output
format used for the Select2 HTML widget (a list of `{id: ..., text: ...}`
rows under a single `results` node; see https://select2.org/data-sources/formats).

When this is enabled, results are limited to a _maximum_ of **100** rows (pagination ignored).


* * *


+ Parameters
    + city_id: 1 (number, optional) - associated City ID
    + name: `CSI OBER FERRARI` (string, optional) - generic FULLTEXT team name search on `name`, `editable_name` & `name_variations` fields
    + select2_format: false (boolean, optional) - `true` to enable the bespoke Select2 simplified output format
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/teams?city_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/teams',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { city_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Team list][]


+ Request Select2 ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/teams?name=ober&select2_format=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/teams',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { name: 'ober', select2_format: true }
                }
            )
    => <RestClient::Response 200 "{\"results\":[{\"id\":4,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    + Body

            {
                "results": [
                    // Team details 1
                    {
                        "id": 1,
                        "text": "CSI Nuoto Ober Ferrari (Reggio Emilia)"
                    },

                    // Team details 2
                    {
                        "id": 2,
                        "text": ...
                    },

                    // [...]
                ]
            }


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
