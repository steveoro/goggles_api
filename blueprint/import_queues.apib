# Group ImportQueues

_**Admin-only group**_


## ImportQueue details [/api/v3/import_queue/{id}]

+ Model (application/json)

        {
            "id": 12174,
            "user_id": 179297,
            "process_runs": 0,
            "request_data": "{\"swimmer_id\":142}",
            "solved_data": "{}",
            "done": false,
            "uid": "6D733BDB-2786-E4A5-55B7-090061B22ACD",
            "bindings_left_count": 0,
            "bindings_left_list": null,
            "error_messages": null,
            "import_queue_id": null # Parent queue ID, if any
        }


### find [GET]
The ImportQueue instance matching the specified `id` returned as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


* * *


+ Parameters
    + id: 12174 (number, required) - ImportQueue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/import_queue/12174"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/import_queue/12174',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":12174, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [ImportQueue details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the ImportQueue fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `user_id` | integer | associated User ID |
| `process_runs` | integer | current processed depth |
| `request_data` | integer | parsable JSON containing the requested entities and thei current state |
| `solved_data` | integer | parsable JSON containing all associated entities with their IDs that have been "solved" |
| `done` | boolean | `true` if this request is deletable (both processed & solved completely) |
| `uid` | string | queue UID (useful for grouping queues) |


* * *


+ Parameters
    + id: 12174 (number, required) - ImportQueue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"request_data": "{}", "solved_data": "{\"swimmer_id\":142}", "done": true}' \
            "<API_HOST:PORT>/api/v3/import_queue/12174"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/import_queue/12174',
                payload: {
                    request_data: "{}",
                    solved_data: "{\"swimmer_id\":142}",
                    done: true
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "request_data": "{}",
                "solved_data": "{\"swimmer_id\":142}",
                "done": true
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "request_data": "{}",
                "solved_data": "{\"swimmer_id\":142}",
                "done": true
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "request_data": "{}",
                "solved_data": "{\"swimmer_id\":142}",
                "done": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "request_data": "{}",
                "solved_data": "{\"swimmer_id\":142}",
                "done": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "request_data": "{}",
                "solved_data": "{\"swimmer_id\":142}",
                "done": true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new ImportQueue, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| *`user_id` | integer | associated User ID |
| *`request_data` | string | parsable JSON containing the requested entities and thei current state |
| `solved_data` | string | parsable JSON containing all associated entities with their IDs that have been "solved" |
| `done` | boolean | `true` if this request is deletable (both processed & solved completely) |
| `uid` | string | queue UID (useful for grouping queues) |


* * *


+ Attributes
    + user_id (number, required) - associated User ID
    + request_data (string, required) - parsable JSON containing the requested entities and thei current state

    + solved_data (string, optional) - parsable JSON containing all associated entities with their IDs that have been "solved"
    + done (boolean, optional) - `true` if this request is deletable (both processed & solved completely)
    + uid (number, optional) - queue UID (useful for grouping queues)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"user_id": 179297, "request_data": "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"}'
            "<API_HOST:PORT>/api/v3/import_queue"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/import_queue',
            {
                'user_id': 179297,
                'request_data': "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 179297,
                'request_data': "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'user_id': 179297,
                'request_data': "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'user_id': 179297,
                'request_data': "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'user_id': 179297,
                'request_data': "{\"swimmer\": {\"last_name\": \"ALLORO\"}}"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 12174 (number, required) - ImportQueue ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/import_queue/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/import_queue/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## ImportQueue Batch [/api/v3/import_queue/batch_sql]

+ Model (application/json)

        {
            "id": 12175,
            "batch_sql": true,
            "data_file": "<ATTACHED_SQL_SCRIPT_AS_MULTIPART_FILE>",
            # (...Other columns ignored...)
        }



### create [POST]

Creates a new ImportQueue marked for macro-transaction, using the uploaded multipart text file as executable SQL
script that has to be executed and consumed by the same processor job that handles all "standard" micro-transaction
ImportQueues.

This is the default interface for uploading large data altering queries on the remote DB. The script will be executed
with delayed timing, depending on the current job queue status and length.

Returns a result text 'msg' on success, with just the 'new' row ID as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| *`data_file` | File | multipart text file (allegedly) containing a valid SQL script wrapping a single transaction |


* * *


+ Attributes
    + data_file (required) - Multipart text file (allegedly) containing a valid SQL script wrapping a single transaction |


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -v -F 'data_file=@\"~/path/to/script_file.sql\"' \
            "<API_HOST:PORT>/api/v3/import_queue/batch_sql"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
        method: :post,
        url: "<API_HOST:PORT>/api/v3/import_queue/batch_sql",
        timeout: 60, # Optional
        payload: {
            multipart: true,
            data_file: File.new('~/path/to/script_file.sql', 'rb')
        },
        headers: { 'Authorization' => "Bearer <VALID-SESSION-JWT>" }
    )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":<NEW_ROW_ID>}}">

    > puts res.body
    {"msg":"OK","new":{"id":<NEW_ROW_ID>}}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            `data_file`: (Any uploaded Multipart text file as value)

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": "{\"id\":<NEW_ROW_ID>}"
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            `data_file`: (Any uploaded Multipart text file as value)


+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            `data_file`: (Any uploaded Multipart text file as value)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            `data_file`: (Any uploaded Multipart text file as value)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# ImportQueue list [/api/v3/import_queues{?page,per_page,user_id,uid,process_runs,requested_depth,solvable_depth,done}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/import_queues?page=2&done=true>; rel=\"last\", <http://localhost:3000/api/v3/import_queues?page=2&done=true>; rel=\"next\""
            Total: 46
            Per-Page: 25
            Page: 1

    + Body

            [
                // ImportQueue details 1
                {
                    "id": 1,
                    // [...]
                },

                // ImportQueue details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of ImportQueues associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `user_id`
- `uid`
- `process_runs`
- `requested_depth`
- `solvable_depth`
- `done`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + user_id: 1 (number, optional) - associated User ID
    + uid: "6D733BDB2786E4A" (string, optional) - queue UID
    + process_runs: 1 (number, optional) - current processed depth
    + requested_depth: 2 (number, optional) - current requested depth
    + solvable_depth: 2 (number, optional) - current solvable depth
    + done: false (boolean, optional) - `true` if this request is deletable (both processed & solved completely)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/import_queues?done=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/import_queues',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { done: true }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [ImportQueue list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
