# Group Cities

## City details [/api/v3/city/{id}]

+ Model (application/json)

        {
            "id": 37,
            "lock_version": 4,
            "name": "Reggio nell Emilia",
            "zip": "?",
            "area": "Reggio Emilia",
            "country": "Italy",
            "country_code": "IT",
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2020-12-11T12:47:52.000Z",
            "latitude": "44.716667",
            "longitude": "10.6",
            "area_code": "RE"
        }


### find [GET]
The City instance matching the specified `id` returned as JSON.

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 37 (number, required) - City ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/city/37"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/city/37',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":37, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [City details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the City fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'City' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `name` | string | City name |
| `country_code` | string | Country code (2 chars) |
| `country` | string | Country name (full) |
| `area` | string | Area/Region/Division name |
| `zip` | string | ZIP/CAP or Postal code override (currently, max 6 chars) |
| `latitude` | string | City latitude |
| `longitude` | string | longitude |


* * *


+ Parameters
    + id: 37 (number, required) - City ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"name": "Reggio Emilia", "area": "Emilia-Romagna"}' \
            "<API_HOST:PORT>/api/v3/city/37"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/city/37',
                payload: { name: "Reggio Emilia", area: "Emilia-Romagna" },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Reggio Emilia",
                "area": "Emilia-Romagna"
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "name": "Reggio Emilia",
                "area": "Emilia-Romagna"
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "name": "Reggio Emilia",
                "area": "Emilia-Romagna"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "name": "Reggio Emilia",
                "area": "Emilia-Romagna"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "name": "Reggio Emilia",
                "area": "Emilia-Romagna"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }

### create [POST]

Creates a new City, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

_Same supported attributes as `PUT /edit`_


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"name": "MyHomeTown", "country_code": "IT"}' \
            "<API_HOST:PORT>/api/v3/city"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/city',
            {
                'name': 'MyHomeTown',
                'country_code': 'IT'
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'name': 'MyHomeTown',
                'country_code': 'IT'
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'name': 'MyHomeTown',
                'country_code': 'IT'
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'name': 'MyHomeTown',
                'country_code': 'IT'
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'name': 'MyHomeTown',
                'country_code': 'IT'
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


# City list [/api/v3/cities{?page,per_page,name,country_code,country}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/cities?page=2&country_code=IT>; rel=\"last\", <http://localhost:3000/api/v3/cities?page=2&country_code=IT>; rel=\"next\""
            Total: 175
            Per-Page: 25
            Page: 1

    + Body

            [
                // City details 1
                {
                    "id": 37,
                    "lock_version": 5,
                    "name": "Reggio nell Emilia",
                    "zip": "?",
                    "area": "Reggio Emilia",
                    "country": "Italy",
                    "country_code": "IT",
                    "created_at": "2014-10-19T00:00:00.000Z",
                    "updated_at": "2020-12-11T12:09:40.000Z",
                    "latitude": "44.716667",
                    "longitude": "10.6"
                },
                // City details 2
                {
                    "id": 2,
                    "lock_version": 4,
                    "name": "Bibbiano",
                    "zip": "?",
                    "area": "Reggio Emilia",
                    "country": "Italy",
                    "country_code": "IT",
                    "created_at": "2014-10-19T00:00:00.000Z",
                    "updated_at": "2020-12-11T12:09:35.000Z",
                    "latitude": "43.116667",
                    "longitude": "11.45"
                },
                // City details 3
                {
                    "id": 6,
                    "lock_version": 4,
                    "name": "Castelnovo ne' Monti",
                    "zip": "?",
                    "area": "Reggio Emilia",
                    "country": "Italy",
                    "country_code": "IT",
                    "created_at": "2014-10-19T00:00:00.000Z",
                    "updated_at": "2020-12-11T12:09:36.000Z",
                    "latitude": "44.433333",
                    "longitude": "10.4"
                },

                // [...]
            ]


## list [GET]

The list of Cities rows associated to the specified filtering values, searched among the database rows
and returned as JSON, optionally filtered by any or all from:

- `name` (string): generic FULLTEXT search on `name` & `area` fields
- `country` (string): Country name
- `country_code` (string): Country code (2 chars)

Returns exact matches for the 'country_code' parameters.
Supports partial matches for the country name field plus a FULLTEXT search by the generic
`name` parameter for both the `area` and `name` fields.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + name: `reggio` (string, optional) - generic FULLTEXT search on `name` & `area` fields
    + country: `Italy` (string, optional) - Country name
    + country_code: `IT` (string, optional) - Country code (2 chars)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/cities?country_code=IT"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/cities',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { country_code: 'IT' }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [City list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)


# City search [/api/v3/cities/search{?page,per_page,name,country_code}]

+ Model (application/json)

    + Header

            Total: 3
            Per-Page: 25
            Page: 1

    + Body

            [
                {
                    "name": "Reggiolo",
                    "population": null,
                    "latitude": 44.916667,
                    "longitude": 10.8,
                    "region_num": "05",
                    "region": "Emilia-Romagna"
                },
                {
                    "name": "Reggio nell Emilia",
                    "population": null,
                    "latitude": 44.716667,
                    "longitude": 10.6,
                    "region_num": "05",
                    "region": "Emilia-Romagna"
                },
                {
                    "name": "Reggio nell'Emilia",
                    "population": null,
                    "latitude": 44.716667,
                    "longitude": 10.6,
                    "region_num": "05",
                    "region": "Emilia-Romagna"
                }
            ]


## search [GET]

The list of ISO-standardized names of Cities associated to the specified name & country code and returned as JSON data.

(Note that this is not a Database search, but a fuzzy-string search on a memory list)

Search by:

- `name` (string): City name (partial name or mistyped)
- `country_code` (string): Country code (2 chars)

Returns the fuzzy matches found for the specified (partial) name; assumes an exact value for the `country_code`.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + name: `reggioemilia` (string, required) - City name
    + country_code: `IT` (string, required) - Country code (2 chars)
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/cities/search?name=reggioemilia&country_code=IT"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/cities/search',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { name: 'reggioemilia', country_code: 'IT' }
                }
            )
    => <RestClient::Response 200 "[{\"data\":{\"city\":\"reggiolo\",...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [City search][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
