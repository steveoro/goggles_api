# Group Meetings

# Meeting details [/api/v3/meeting/{id}]

+ Model (application/json)

            {
                "id": 1,
                "lock_version": 0,
                "description": "3A PROVA REGIONALE CSI",
                "entry_deadline": null,
                "warm_up_pool": false,
                "allows_under25": false,
                "reference_phone": "",
                "reference_e_mail": "",
                "reference_name": "",
                "notes": "",
                "manifest": false,
                "startlist": false,
                "results_acquired": true,
                "max_individual_events": 2,
                "configuration_file": "",
                "edition": 0,
                "season_id": 1,
                "created_at": "2014-10-19T00:00:00.000Z",
                "updated_at": "2014-10-19T00:00:00.000Z",
                "autofilled": false,
                "header_date": "2001-04-01",
                "code": "csiprova3",
                "header_year": "2000/2001",
                "max_individual_events_per_session": 0,
                "off_season": false,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "individual_score_computation_type_id": 3,
                "relay_score_computation_type_id": 15,
                "team_score_computation_type_id": 14,
                "meeting_score_computation_type_id": 7,
                "manifest_body": null,
                "confirmed": true,
                "tweeted": false,
                "posted": false,
                "cancelled": false,
                "pb_acquired": true,
                "home_team_id": null,
                "read_only": false,
                "meeting_fee": null,
                "event_fee": null,
                "relay_fee": null,
                "edition_label": "2000/2001",
                "season": {
                    "id": 1,
                    "description": "Circuito Regionale Emilia master CSI 2000/2001",
                    "begin_date": "2000-09-01",
                    "end_date": "2001-06-30",
                    "season_type_id": 2,
                    "header_year": "2000/2001",
                    "edition": 1,
                    "edition_type_id": 5,
                    "timing_type_id": 2,
                    "rules": null,
                    "individual_rank": true,
                    "badge_fee": null
                },
                "edition_type": {
                    "id": 5,
                    "code": "S",
                    "label": "SEA",
                    "long_label": "SEASON",
                    "alt_label": "SEA"
                },
                "timing_type": {
                    "id": 2,
                    "code": "S",
                    "label": "SEM",
                    "long_label": "SEMIAUTOMATIC",
                    "alt_label": "SEM"
                },
                "season_type": {
                    "id": 2,
                    "code": "MASCSI",
                    "description": "CIRCUITO ITALIANO MASTER CSI",
                    "short_name": "MASTER CSI",
                    "federation_type_id": 2
                },
                "federation_type": {
                    "id": 2,
                    "code": "CSI",
                    "description": "CENTRO SPORTIVO ITALIANO",
                    "short_name": "CSI"
                },
                "meeting_sessions": [
                    {
                        "id": 1,
                        "session_order": 1,
                        "scheduled_date": "2001-04-01",
                        "warm_up_time": "2000-01-01T00:00:00.000Z",
                        "begin_time": "2000-01-01T00:00:00.000Z",
                        "notes": "",
                        "meeting_id": 1,
                        "swimming_pool_id": 5,
                        "description": "FINALI",
                        "autofilled": false,
                        "day_part_type_id": null
                    }
                ],
                "meeting_events": [
                    // Event 1:
                    {
                        "id": 1230,
                        "event_order": 1,
                        "begin_time": "2000-01-01T00:00:00.000Z",
                        "out_of_race": false,
                        "autofilled": false,
                        "notes": null,
                        "meeting_session_id": 1,
                        "event_type_id": 19,
                        "heat_type_id": 3,
                        "split_gender_start_list": true,
                        "split_category_start_list": false,
                        "event_type": {
                            "id": 19,
                            "code": "50RA",
                            "length_in_meters": 50,
                            "relay": false,
                            "stroke_type_id": 4,
                            "style_order": 19,
                            "mixed_gender": false,
                            "partecipants": 1,
                            "phases": 1,
                            "phase_length_in_meters": 50,
                            "label": "50 BS",
                            "long_label": "50 BREASTROKE",
                            "alt_label": "50 BS"
                        },
                        "pool_type": {
                            "id": 1,
                            "code": "25",
                            "length_in_meters": 25,
                            "eventable": true,
                            "label": "25 M",
                            "long_label": "25 METERS",
                            "alt_label": "25 M"
                        },
                        "stroke_type": {
                            "id": 4,
                            "code": "RA",
                            "eventable": true,
                            "label": "BR",
                            "long_label": "BREASTROKE",
                            "alt_label": "BS"
                        },
                        "heat_type": {
                            "id": 3,
                            "code": "F",
                            "default": false,
                            "label": "FN",
                            "long_label": "FINALS",
                            "alt_label": "FN"
                        }
                    },

                    // Event 2:
                    {
                        "id": 1231,
                        "event_order": 2,
                        "begin_time": "2000-01-01T00:00:00.000Z",
                        "out_of_race": false,
                        "autofilled": false,
                        "notes": null,
                        "meeting_session_id": 1,
                        "event_type_id": 15,
                        "heat_type_id": 3,
                        "split_gender_start_list": true,
                        "split_category_start_list": false,
                        "event_type": {
                            "id": 15,
                            "code": "50DO",
                            "length_in_meters": 50,
                            "relay": false,
                            "stroke_type_id": 3,
                            "style_order": 15,
                            "mixed_gender": false,
                            "partecipants": 1,
                            "phases": 1,
                            "phase_length_in_meters": 50,
                            "label": "50 BK",
                            "long_label": "50 BACKSTROKE",
                            "alt_label": "50 BK"
                        },
                        "pool_type": {
                            "id": 1,
                            "code": "25",
                            "length_in_meters": 25,
                            "eventable": true,
                            "label": "25 M",
                            "long_label": "25 METERS",
                            "alt_label": "25 M"
                        },
                        "stroke_type": {
                            "id": 3,
                            "code": "DO",
                            "eventable": true,
                            "label": "BK",
                            "long_label": "BACKSTROKE",
                            "alt_label": "BA"
                        },
                        "heat_type": {
                            "id": 3,
                            "code": "F",
                            "default": false,
                            "label": "FN",
                            "long_label": "FINALS",
                            "alt_label": "FN"
                        }
                    },

                    // Event 3:
                    {
                        "id": 1232,
                        "event_order": 3,
                        "begin_time": "2000-01-01T00:00:00.000Z",
                        "out_of_race": false,
                        "autofilled": false,
                        "notes": null,
                        "meeting_session_id": 1,
                        "event_type_id": 11,
                        "heat_type_id": 3,
                        "split_gender_start_list": true,
                        "split_category_start_list": false,
                        "event_type": {
                            "id": 11,
                            "code": "50FA",
                            "length_in_meters": 50,
                            "relay": false,
                            "stroke_type_id": 2,
                            "style_order": 11,
                            "mixed_gender": false,
                            "partecipants": 1,
                            "phases": 1,
                            "phase_length_in_meters": 50,
                            "label": "50 BF",
                            "long_label": "50 BUTTERFLY",
                            "alt_label": "50 BF"
                        },
                        "pool_type": {
                            "id": 1,
                            "code": "25",
                            "length_in_meters": 25,
                            "eventable": true,
                            "label": "25 M",
                            "long_label": "25 METERS",
                            "alt_label": "25 M"
                        },
                        "stroke_type": {
                            "id": 2,
                            "code": "FA",
                            "eventable": true,
                            "label": "BT",
                            "long_label": "BUTTERFLY",
                            "alt_label": "BU"
                        },
                        "heat_type": {
                            "id": 3,
                            "code": "F",
                            "default": false,
                            "label": "FN",
                            "long_label": "FINALS",
                            "alt_label": "FN"
                        }
                    },

                    // [...More event definitions...]
                ]
            }


## find [GET]

The Meeting instance matching the specified `id` returned as JSON.
The returned result includes most of all its associated entities, up to the `MeetingEvent` definitions (but no `MeetingProgram`s).

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 1 (number, required) - Meeting ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: 'localhost:3000/api/v3/meeting/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Meeting details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for any Meeting field, given its `id`.
Requires CRUD grant on entity ('Meeting') for the requesting user.
Generic admin grants are required for `read_only` & `season_id` fields.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Swimmer' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `code` | string | Meeting code-name (recurring meetings should have the same code to be easily identified) |
| `header_date` | string | header (main) date for the Meeting in ISO format (`YYYY-MM-DD`) |
| `header_year` | string | header (main) year for the Meeting (`YYYY`) |
| `description` | string | displayed Meeting description |
| `entry_deadline` | string | entry deadline for registration, in ISO format (`YYYY-MM-DD`) |
| `warm_up_pool` | boolean | `true` if a warm-up pool is available during the Meeting |
| `allows_under25` | boolean | `true` if under-25 can compete |
| `reference_phone` | string | contact or reference phone |
| `reference_e_mail` | string | contact or reference e-mail |
| `reference_name` | string | contact or reference name |
| `max_individual_events` | integer | max number of indiv. events x session (x athlete) |
| `meeting_fee` | integer | main enrollment/registration cost (converted to Euros, if needed) |
| `event_fee` | integer | individual event cost (converted to Euros, if needed) |
| `relay_fee` | integer | relay event cost (converted to Euros, if needed) |
| `notes` | string | additional notes |
| `home_team_id` | integer | Team ID of the organizing Team behind this Meeting |
| `edition` | integer | Edition number |
| `edition_type_id` | integer | EditionType ID |
| | _id_ | _code: description_ |
| | 1 | `O`: ordinal number |
| | 2 | `R`: roman numeral |
| | 3 | `N`: none |
| | 4 | `Y`: year |
| | 5 | `S`: season |
| `timing_type_id` | integer | TimingType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `S`: semi-automatic |
| | 3 | `A`: automatic |
| `manifest_body` | string | Meeting Manifest body (either in text or html format, stripped of styles & scripts) |
| `manifest` | boolean | `true` if the Meeting manifest is available or published and can be acquired |
| `confirmed` | boolean | `true` if the Meeting has been confirmed |
| `cancelled` | boolean | `true` if the Meeting has been cancelled |
| `startlist` | boolean | `true` if the starting list has been published (and can be acquired) |
| `results_acquired` | boolean | `true` if the results have been already acquired |
| `off_season` | boolean | `true` if the Meeting does not concur in the overall scoring of its Season |
| `autofilled` | boolean | `true` if the fields have been filled-in by the data-import procedure (may need revision) |
| `tweeted` | boolean | `true` if the Meeting result link has been already tweeted |
| `posted` | boolean | `true` if the Meeting result link has been already posted on other Social Media |
| `pb_acquired` | boolean | `true` if athletes' personal-best timings and scores have already been computed |
| `season_id` | integer | Season ID for the Meeting (Admin only) |
| `read_only` | boolean | `true` to disable further editing by automatic data-import procedure (Admin only) |


* * *


+ Parameters
    + id: 1 (number, required) - Meeting ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"code": "csiprova2", "edition_type_id": 1, "confirmed": "true"}' \
            "<API_HOST:PORT>/api/v3/meeting/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting/1',
                payload: {
                    code: 'csiprova2',
                    edition_type_id: 1,
                    confirmed: true
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                code: 'csiprova2',
                edition_type_id: 1,
                confirmed: true
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                code: 'csiprova2',
                edition_type_id: 1,
                confirmed: true
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                code: 'csiprova2',
                edition_type_id: 1,
                confirmed: true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                code: 'csiprova2',
                edition_type_id: 1,
                confirmed: true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                code: 'csiprova2',
                edition_type_id: 1,
                confirmed: true
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Meeting clone [/api/v3/meetings/clone/{id}]

## clone [POST]

Clones the event & program structure from the specified Meeting id, into a new one,
updating the header date to the present year, increasing the edition number and clearing out
most of the internal status columns. (The resulting meeting won't be confirmed.)

Returns `true` on success with the new Meeting details as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Swimmer' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| *`id` | string | source Meeting ID |
| *`to_season_id` | string | destination Season ID (defaults to source Meeting season) |


* * *


+ Parameters
    + id: 12345 (number, required) - _source_ Meeting ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting/clone/12345"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :post,
                url: '<API_HOST:PORT>/api/v3/meeting/clone/12345',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 422 (application/json)

        { "msg": "Invalid constructor parameters" }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }




# Meeting list [/api/v3/meetings{?page,per_page,name,date,season_id,pool_type_id,select2_format}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meetings?page=60&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meetings?page=2&season_id=1>; rel=\"next\""
            Total: 5
            Per-Page: 25
            Page: 1

    + Body

            [
                // Meeting details 1
                {
                    "id": 1,
                    // [...]
                },

                // Meeting details 2
                {
                    "id": 2,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Meetings associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `name`
- `date`
- `season_id`
- `pool_type_id`

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


### Support for Select2 bespoke format output

Use the parameter `select2_format` => `true` to enable the simplified output
format used for the Select2 HTML widget (a list of `{id: ..., text: ...}`
rows under a single `results` node; see https://select2.org/data-sources/formats).

When this is enabled, results are limited to a _maximum_ of **100** rows (pagination ignored).


* * *


+ Parameters
    + name: `csiprova` (string, optional) - generic FULLTEXT search on `description` & `code` fields
    + date: `2005-11-23` (string, optional) - filter by `header_date` or Meeting session's `scheduled_date` in ISO format (`YYYY-MM-DD`)
    + season_id: 1 (number, optional) - associated Season ID
    + pool_type_id: 1 (number, optional) - associated PoolType ID, from any associated Meeting session
    + select2_format: false (boolean, optional) - `true` to enable the bespoke Select2 simplified output format
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meetings?season_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meetings',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { season_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Meeting list][]


+ Request Select2 ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meetings?season_id=1&select2_format=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meetings',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { season_id: 1, select2_format: true }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    + Body

            {
                "results": [
                    // Meeting details 1
                    {
                        "id": 1,
                        "text": "I Prova CSI (2018-11-23)"
                    },

                    // Meeting details 2
                    {
                        "id": 2,
                        "text": ...
                    },

                    // [...]
                ]
            }


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }
