# Group Badges

# Badge details [/api/v3/badge/{id}]

+ Model (application/json)

        {
            "id": 124947,
            "lock_version": 0,
            "number": "04204788",
            "season_id": 191,
            "swimmer_id": 142,
            "team_id": 1,
            "category_type_id": 1320,
            "user_id": 1,
            "created_at": "2019-10-16T00:00:00.000Z",
            "updated_at": "2019-10-16T00:00:00.000Z",
            "entry_time_type_id": 5,
            "team_affiliation_id": 5727,
            "final_rank": null,
            "off_gogglecup": false,
            "fees_due": false,
            "badge_due": false,
            "relays_due": false,

            // Embedded associated entities:
            "swimmer": {
                "id": 142,
                "last_name": "ALLORO",
                "first_name": "STEFANO",
                "year_of_birth": 1969,
                "phone_mobile": null,
                "phone_number": null,
                "e_mail": null,
                "nickname": "",
                "associated_user_id": 1,
                "gender_type_id": 1,
                "user_id": 2,
                "complete_name": "ALLORO STEFANO",
                "year_guessed": false,

                "associated_user": {
                    "id": 1,
                    "name": "steve",
                    "description": "Stefano Alloro",
                    "swimmer_id": 142,
                    // [...Associated user details...]
                }

                "gender_type": {
                    // [...Duplicated GenderType details...]
                }
            },

            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            },

            "team_affiliation": {
                "id": 5727,
                "number": "04200002",
                "name": "CSInuoto OberFerrari",
                "compute_gogglecup": true,
                "team_id": 1,
                "season_id": 191,
                "user_id": 2,
                "autofilled": false
            },

            "season": {
                "id": 191,
                "description": "Circuito regionale Emilia master CSI 2019/2020",
                "begin_date": "2019-10-01",
                "end_date": "2020-09-30",
                "season_type_id": 2,
                "header_year": "2019/2020",
                "edition": 20,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "individual_rank": true,
                "badge_fee": "10.0"
            },

            "team": {
                "id": 1,
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "CSI NUOTO OBER FERRARI ASD",
                "address": "Via Agosti, 6",
                "zip": "",
                "phone_mobile": "",
                "phone_number": "",
                "fax_number": null,
                "e_mail": "leegaweb@gmail.com",
                "contact_name": "Marco Ligabue",
                "notes": "L'IBAN per i pagamenti delle iscrizioni alle gare Ã¨ IT91T0347501605CC0010433557",
                "name_variations": null,
                "city_id": 37,
                "home_page_url": "",

                // City details:
                "city": {
                    "id": 37,
                    "name": "Reggio nell Emilia",
                    "zip": "?",
                    "area": "Reggio Emilia",
                    "country": "Italy",
                    "country_code": "IT",
                    "latitude": "44.716667",
                    "longitude": "10.6",
                    "region": "Emilia-Romagna",
                    "area_code": "RE"
                }
            },

            "category_type": {
                "id": 1320,
                "code": "M50",
                "federation_code": "8",
                "description": "MASTER 50",
                "short_name": "M50",
                "group_name": "MASTER",
                "age_begin": 50,
                "age_end": 54,
                "relay": false,
                "season_id": 191,
                "out_of_race": false,
                "undivided": false
            },

            "entry_time_type": {
                "id": 5,
                "code": "U",
                "label": "LR",
                "long_label": "LAST RESULT",
                "alt_label": "LR"
            }
        }


## find [GET]

The Badge instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `Swimmer` (including associated `User` & `GenderType`)
- `TeamAffiliation`
- `Season`
- `Team` (including `City`)
- `CategoryType`
- `EntryTimeType`

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 124947 (number, required) - Badge ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badge/124947"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: 'localhost:3000/api/v3/badge/124947',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":12494...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Badge details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for the Badge number and other limited fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Badge' or have generic admin grants


#### Body Attributes:

All are optional (except `id` & `number`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `number` | string | **required**, Badge code or number |
| `entry_time_type_id` | integer | associated EntryTimeType ID for referencing entry timings |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `P`: personal |
| | 3 | `G`: GoggleCup |
| | 4 | `A`: preceding year |
| | 5 | `U`: last race |
| `fees_due` | boolean | `true`, the swimmer has to pay additional meeting fees for the Championship; `false`, the team provides |
| `badge_due` | boolean | `true`, the swimmer has to pay the badge registration; `false`, the team provides |
| `relays_due` | boolean | `true`, the swimmer has to pay any relay event in the Championship; `false`, the team provides |


* * *


+ Parameters
    + id: 124947 (number, required) - Badge ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"number": "A_NEW_OR_EXISTING_BADGE_CODE", \
                "entry_time_type_id": 1, "badge_due": "true"}' \
            "<API_HOST:PORT>/api/v3/badge/124947"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/badge/124947',
                payload: {
                    number: 'A_NEW_OR_EXISTING_BADGE_CODE',
                    entry_time_type_id: 1,
                    badge_due: true
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "number": "A_NEW_OR_EXISTING_BADGE_CODE",
                "entry_time_type_id": 1,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "number": "A_NEW_OR_EXISTING_BADGE_CODE",
                "entry_time_type_id": 1,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "number": "A_NEW_OR_EXISTING_BADGE_CODE",
                "entry_time_type_id": 1,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "number": "A_NEW_OR_EXISTING_BADGE_CODE",
                "entry_time_type_id": 1,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "number": "A_NEW_OR_EXISTING_BADGE_CODE",
                "entry_time_type_id": 1,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


### create [POST]

Creates a new Badge, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `swimmer_id` | integer | **required**, associated Swimmer ID |
| `team_affiliation_id` | integer | **required**, associated TeamAffiliation ID |
| `season_id` | integer | **required**, associated Season ID |
| `team_id` | integer | **required**, associated Team ID |
| `category_type_id` | integer | **required**, associated CategoryType ID |
| `entry_time_type_id` | integer | **required**, associated EntryTimeType ID for referencing entry timings |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `P`: personal |
| | 3 | `G`: GoggleCup |
| | 4 | `A`: preceding year |
| | 5 | `U`: last race |
| `number` | string | Badge code or number |
| `off_gogglecup` | boolean | `true`, the swimmer does not run for the bespoke GoggleCup |
| `fees_due` | boolean | `true`, the swimmer has to pay additional meeting fees for the Championship; `false`, the team provides |
| `badge_due` | boolean | `true`, the swimmer has to pay the badge registration; `false`, the team provides |
| `relays_due` | boolean | `true`, the swimmer has to pay any relay event in the Championship; `false`, the team provides |


* * *


+ Attributes
    + swimmer_id (number, required) - associated Swimmer ID
    + team_affiliation_id (number, required) - associated TeamAffiliation ID
    + season_id (number, required) - associated Season ID
    + team_id (number, required) - associated Team ID
    + category_type_id (number, required) - associated CategoryType ID
    + entry_time_type_id (number, required) - associated EntryTimeType ID
    + number (string, optional) - enrollment code or Team registration badge number
    + off_gogglecup (boolean, optional) - `true` when the customized GoggleCup has to be computed
    + fees_due (boolean, optional) - `true` when the swimmer has to pay additional meeting fees for the Championship
    + badge_due (boolean, optional) - `true` when the swimmer has to pay the badge registration
    + relays_due (boolean, optional) - `true` when the swimmer has to pay any relay event in the Championship


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"team_id": 1, "season_id": 194, "swimmer_id": 142, \
                 "team_affiliation_id": 12456, "category_type_id": 47", \
                 "entry_time_type_id": 1}' \
            "<API_HOST:PORT>/api/v3/team_affiliation"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/team_affiliation',
            {
                'team_id': 1,
                'season_id': 194,
                'swimmer_id': 142,
                'team_affiliation_id': 12456,
                'category_type_id': 47,
                'entry_time_type_id': 1
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'swimmer_id': 142,
                'team_affiliation_id': 12456,
                'category_type_id': 47,
                'entry_time_type_id': 1
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'swimmer_id': 142,
                'team_affiliation_id': 12456,
                'category_type_id': 47,
                'entry_time_type_id': 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'swimmer_id': 142,
                'team_affiliation_id': 12456,
                'category_type_id': 47,
                'entry_time_type_id': 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'team_id': 1,
                'season_id': 194,
                'swimmer_id': 142,
                'team_affiliation_id': 12456,
                'category_type_id': 47,
                'entry_time_type_id': 1
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

+ Parameters
    + id: 1 (number, required) - Badge ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badge/10"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/badge/10',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }


# Badge list [/api/v3/badges{?page,per_page,team_id,team_affiliation_id,season_id,swimmer_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/badges?page=60&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/badges?page=2&team_id=1>; rel=\"next\""
            Total: 1483
            Per-Page: 25
            Page: 1

    + Body

            [
                // Badge details 1
                {
                    "id": 124947,
                    // [...]
                },

                // Badge details 2
                {
                    "id": 124948,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of Badges associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `team_id`
- `team_affiliation_id`
- `season_id`
- `swimmer_id`

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + team_id: 1 (number, optional) - associated Badge ID
    + swimmer_id: 142 (number, optional) - associated Swimmer ID
    + team_affiliation_id: 5727 (number, optional) - associated TeamAffiliation ID
    + season_id: 1 (number, optional) - associated Season ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/badges?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/badges',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":12494...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Badge list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }
