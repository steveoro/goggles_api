# Group UserResults

## UserResult details [/api/v3/user_result/{id}]

+ Model (application/json)

        {
            "id": 6032,
            "standard_points": "850.0",
            "meeting_points": "850.0",
            "rank": 13,
            "disqualified": false,
            "minutes": 0,
            "seconds": 50,
            "hundredths": 6,
            "swimmer_id": 187661,
            "category_type_id": 123304,
            "pool_type_id": 2,
            "user_id": 3,
            "disqualification_code_type_id": null,
            "description": "Sawayn Shawanda 97103, 400SL",
            "event_date": "2021-07-07",
            "reaction_time": "0.77",
            "event_type_id": 5,
            "user_workshop_id": 7346,
            "swimming_pool_id": 117603,
            "standard_timing_id": null,
            "timing": "0'50\"06",
            "swimmer_name": "Sawayn Shawanda 97103",
            "swimmer_label": "Sawayn Shawanda 97103 (FEM, 1966)",
            "event_label": "400 FS",
            "category_label": "(2020/2021) M50",
            "category_code": "M50",
            "gender_code": "F",

            "swimmer": {
                "id": 187661,
                "complete_name": "Sawayn Shawanda 97103",
                "last_name": "Sawayn",
                "first_name": "Shawanda",
                "year_of_birth": 1966,
                "year_guessed": false
            },
            "gender_type": {
                "id": 2,
                "code": "F",
                "label": "FEM",
                "long_label": "FEMALE",
                "alt_label": "FEMALE"
            },

            "user_workshop": {
                "id": 7346,
                "code": "workshop-1",
                "header_year": "2021/2022",
                "edition_label": "40Â°"
            },

            "swimming_pool": {
                "id": 117603,
                "name": "Russ Garden pool",
                "address": "2143 Minda River",
                "zip": null,
                "nick_name": "schultzvillerussgardenpool50",
                "phone_number": null,
                "fax_number": null,
                "e_mail": null,
                "contact_name": null,
                "maps_uri": null,
                "lanes_number": 6,
                "multiple_pools": true,
                "garden": false,
                "bar": true,
                "restaurant": true,
                "gym": false,
                "child_area": false,
                "notes": null,
                "city_id": 288239,
                "pool_type_id": 2,
                "shower_type_id": 1,
                "hair_dryer_type_id": 3,
                "locker_cabinet_type_id": 3,
                "read_only": false,
                "latitude": null,
                "longitude": null,
                "plus_code": null,
                "display_label": "Russ Garden pool ('schultzvillerussgardenpool50', 50 M), Schultzville,  (EC)",
                "short_label": "Russ Garden pool (50 M), Schultzville",
                "city": "Schultzville",
                "pool_code": "50"
            },

            "pool_type": {
                "id": 2,
                "code": "50",
                "length_in_meters": 50,
                "eventable": true,
                "label": "50 M",
                "long_label": "50 METERS",
                "alt_label": "50 M"
            },

            "event_type": {
                "id": 5,
                "code": "400SL",
                "length_in_meters": 400,
                "relay": false,
                "stroke_type_id": 1,
                "style_order": 5,
                "mixed_gender": false,
                "partecipants": 1,
                "phases": 1,
                "phase_length_in_meters": 400,
                "label": "400 FS",
                "long_label": "400 FREESTYLE",
                "alt_label": "400 FS"
            },

            "category_type": {
                "id": 123304,
                "code": "M50",
                "federation_code": "G",
                "description": "MASTER 50",
                "short_name": "M50",
                "group_name": "MASTER",
                "age_begin": 50,
                "age_end": 54,
                "relay": false,
                "season_id": 202,
                "out_of_race": false,
                "undivided": false,
                "display_label": "M50, FIN MASTER 2020/2021",
                "short_label": "(2020/2021) M50"
            },
            "stroke_type": {
                "id": 1,
                "code": "SL",
                "eventable": true,
                "label": "FS",
                "long_label": "FREESTYLE",
                "alt_label": "CR"
            },

            "laps": [
                {
                    "id": 4429,
                    "user_result_id": 6032,
                    "swimmer_id": 187661,
                    "reaction_time": "0.13",
                    "minutes": 0,
                    "seconds": 40,
                    "hundredths": 67,
                    "length_in_meters": 50,
                    "position": 7,
                    "minutes_from_start": 1,
                    "seconds_from_start": 40,
                    "hundredths_from_start": 67,
                    "timing": "0'40\"67",
                    "timing_from_start": "1'40\"67"
                },
                {
                    "id": 4433,
                    "user_result_id": 6032,
                    "swimmer_id": 187661,
                    "reaction_time": "0.94",
                    "minutes": 0,
                    "seconds": 58,
                    "hundredths": 97,
                    "length_in_meters": 100,
                    "position": 10,
                    "minutes_from_start": 1,
                    "seconds_from_start": 58,
                    "hundredths_from_start": 97,
                    "timing": "0'58\"97",
                    "timing_from_start": "1'58\"97"
                },
                // ...Remaining user laps...
            ]
        }


### find [GET]
The UserResult instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `UserWorkshop`
- `UserLap` (array of)
- `Swimmer`
- `CategoryType`
- `StrokeType`
- `GenderType`
- `EventType`
- `PoolType`
- `DisqualificationCodeType`

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 141 (number, required) - UserResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_result/141"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/user_result/141',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":141, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [UserResult details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the UserResult fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'UserResult' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `user_id` | integer | associated User ID / creator |
| `user_workshop_id` | integer | associated UserWorkshop ID |
| `event_date` | string | event date in ISO format |
| `description` | string | description for this event/result |
| `swimmer_id` | integer | associated Swimmer ID |
| `pool_type_id` | integer | associated PoolType ID |
| | _id_ | _code: description_ |
| | 1 | `25`: 25 meters |
| | 2 | `33`: 33 meters |
| | 3 | `50`: 50 meters |
| `category_type_id` | integer | associated CategoryType ID; see dedicated enpoint for more details |
| `event_type_id` | integer | associated EventType ID;  GET `/lookup/event_types` => list of supported values |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |


* * *


+ Parameters
    + id: 1 (number, required) - UserResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"event_type_id": 4, "minutes": 0, "seconds": 36}' \
            "<API_HOST:PORT>/api/v3/user_result/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/user_result/1',
                payload: {
                    event_type_id: 4, minutes: 0, seconds: 36
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_type_id": 4,
                "minutes": 0,
                "seconds": 36
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "event_type_id": 4,
                "minutes": 0,
                "seconds": 36
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "event_type_id": 4,
                "minutes": 0,
                "seconds": 36
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "event_type_id": 4,
                "minutes": 0,
                "seconds": 36
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "event_type_id": 4,
                "minutes": 0,
                "seconds": 36
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new UserResult, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'UserResult' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `user_id` | integer | associated User ID / creator |
| `user_workshop_id` | integer | associated UserWorkshop ID |
| `event_date` | string | event date in ISO format |
| `description` | string | description for this event/result |
| `swimmer_id` | integer | associated Swimmer ID |
| `pool_type_id` | integer | associated PoolType ID |
| | _id_ | _code: description_ |
| | 1 | `25`: 25 meters |
| | 2 | `33`: 33 meters |
| | 3 | `50`: 50 meters |
| `category_type_id` | integer | associated CategoryType ID; see dedicated enpoint for more details |
| `event_type_id` | integer | associated EventType ID;  GET `/lookup/event_types` => list of supported values |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | lap time, minutes |
| `seconds` | integer | lap time, seconds |
| `hundredths` | integer | lap time, hundredths of seconds |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |


* * *


+ Attributes
    + user_id (number, required) - associated User ID
    + user_workshop_id (number, required) - associated TeamAffiliation ID
    + event_date (string, required) - date in ISO format
    + pool_type_id (number, required) - associated PoolType ID
    + event_type_id (number, required) - associated EventType ID
    + category_type_id (number, required) - associated CategoryTimeType ID
    + swimmer_id (number, optional) - associated Swimmer ID
    + description (string, optional)
    + swimming_pool_id (number, optional) - associated SwimmingPool ID
    + reaction_time (number, optional)
    + minutes (number, optional)
    + seconds (number, optional)
    + hundredths (number, optional)
    + standard_points (number, optional)
    + meeting_points (number, optional)
    + rank (number, optional)
    + disqualified (number, optional)
    + disqualification_code_type_id (number, optional) - associated DisqualificationCodeType ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"user_id": 1, "user_workshop_id": 1, "event_date": "2020-09-18", \
                 "pool_type_id": 1, "event_type_id": 4, "category_type_id": 4}' \
            "<API_HOST:PORT>/api/v3/user_result"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/user_result',
            {
                user_id: 1,
                user_workshop_id: 1,
                event_date: "2020-09-18",
                pool_type_id: 1,
                event_type_id: 4,
                category_type_id: 4
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "user_id": 1,
                "user_workshop_id": 1,
                "event_date": "2020-09-18",
                "pool_type_id": 1,
                "event_type_id": 4,
                "category_type_id": 4
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "user_id": 1,
                "user_workshop_id": 1,
                "event_date": "2020-09-18",
                "pool_type_id": 1,
                "event_type_id": 4,
                "category_type_id": 4
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "user_id": 1,
                "user_workshop_id": 1,
                "event_date": "2020-09-18",
                "pool_type_id": 1,
                "event_type_id": 4,
                "category_type_id": 4
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "user_id": 1,
                "user_workshop_id": 1,
                "event_date": "2020-09-18",
                "pool_type_id": 1,
                "event_type_id": 4,
                "category_type_id": 4
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'UserResult' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 1 (number, required) - UserResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_result/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/user_result/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# UserResult list [/api/v3/user_results{?page,per_page,user_id,user_workshop_id,event_date,pool_type_id,event_type_id,category_type_id,swimmer_id,description,swimming_pool_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/user_results?page=2&user_id=1>; rel=\"last\", <http://localhost:3000/api/v3/user_results?page=2&user_id=1>; rel=\"next\""
            Total: 46
            Per-Page: 25
            Page: 1

    + Body

            [
                // UserResult details 1
                {
                    "id": 1,
                    // [...]
                },

                // UserResult details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of UserResults associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `user_id`
- `user_workshop_id`
- `event_date`
- `pool_type_id`
- `event_type_id`
- `category_type_id`
- `swimmer_id`
- `description`
- `swimming_pool_id`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *
- `user_id`
- `user_workshop_id`
- `event_date`
- `pool_type_id`
- `event_type_id`
- `category_type_id`
- `swimmer_id`
- `description`
- `swimming_pool_id`


+ Parameters
    + user_id: 1 (number, optional) - associated User ID (creator/recorder)
    + user_workshop_id: 1 (number, optional) - associated UserWorkshop ID
    + event_date: 156 (string, optional) - date for the event/result in ISO format
    + pool_type_id: 1 (number, optional) - associated PoolType ID
    + event_type_id: 1 (number, optional) - associated EventType ID
    + category_type_id: 1 (number, optional) - associated CategoryType ID
    + swimmer_id: 142 (number, optional) - associated Swimmer ID (or default swimmer for the laps)
    + description: 1 (string, optional) - description for this event/result
    + swimming_pool_id: 1 (number, optional) - associated SwimmingPool ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/user_results?user_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/user_results',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { user_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [UserResult list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
