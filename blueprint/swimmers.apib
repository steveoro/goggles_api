# Group Swimmers

## Swimmer details [/api/v3/swimmer/{id}]

+ Model (application/json)

        {
            "id": 142,
            "lock_version": 1,
            "last_name": "ALLORO",
            "first_name": "STEFANO",
            "year_of_birth": 1969,
            "phone_mobile": null,
            "phone_number": null,
            "e_mail": null,
            "nickname": "",
            "associated_user_id": 1,
            "gender_type_id": 1,
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2014-10-19T16:04:16.000Z",
            "complete_name": "ALLORO STEFANO",
            "year_guessed": false,
            "long_label": "ALLORO STEFANO (MAS, 1969)",
            "display_label": "ALLORO STEFANO (MAS, 1969)",
            "short_label": "ALLORO STEFANO (1969)",
            "associated_user": {
                "id": 1,
                "name": "steve",
                "description": "Stefano Alloro",
                "swimmer_id": null,
                "email": "steve.alloro@example.com",
                "reset_password_token": null,
                "reset_password_sent_at": null,
                "remember_created_at": "2021-11-13T17:10:59.000Z",
                "sign_in_count": 59,
                "current_sign_in_at": "2021-11-13T17:10:59.000Z",
                "last_sign_in_at": "2021-11-13T17:10:59.000Z",
                "current_sign_in_ip": "127.0.0.1",
                "last_sign_in_ip": "127.0.0.1",
                "confirmed_at": "2021-09-20T17:29:40.000Z",
                "confirmation_sent_at": "2021-09-20T17:29:25.000Z",
                "unconfirmed_email": null,
                "failed_attempts": 0,
                "unlock_token": null,
                "locked_at": null,
                "avatar_url": null,
                "swimmer_level_type_id": 5,
                "coach_level_type_id": null,
                "jwt": "<a valid JWT string>",
                "outstanding_goggle_score_bias": 800,
                "outstanding_standard_score_bias": 800,
                "last_name": "Alloro",
                "first_name": "Stefano",
                "year_of_birth": 1969,
                "provider": null,
                "uid": null
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAS",
                "long_label": "MASCHILE",
                "alt_label": "MASCHI"
            }
        }


### find [GET]
The Swimmer instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `User`, the `associated_user` for this Swimmer
- `GenderType`
    | _id_ | _code_ | _description_ |
    | --- | --- | --- |
    | 1 | `M` | male |
    | 2 | `F` | female |
    | 3 | `X` | intermixed/unknown |

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 142 (number, required) - Swimmer ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimmer/142"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimmer/142',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":142, ...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Swimmer details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for some of the Swimmer fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'Swimmer' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `first_name` | string | first name(s): when middle names are present, these will be concatenated and stored here too |
| `last_name` | string | the family name portion of the complete name, when it is known |
| `complete_name` | string | complete name, as it appears from the public rankings (italian ordering: last name first) |
| `nickname` | string | nickname |
| `year_of_birth` | number | year of birth |
| `associated_user_id` | number | associated User ID |
| `gender_type_id` | number | associated GenderType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: male |
| | 2 | `F`: female |
| | 3 | `X`: unknown |
| `year_guessed` | boolean |`true` when year of birth has been deduced from other data  |


* * *


+ Parameters
    + id: 142 (number, required) - Swimmer ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"nickname": "steve", "year_of_birth": 1969, \
                 "year_guessed": "false"}' \
            "<API_HOST:PORT>/api/v3/swimmer/142"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/swimmer/142',
                payload: {
                    nickname: "steve", year_of_birth: 1969,
                    year_guessed: false
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "first_name": "Stefano",
                "last_name": "Alloro",
                "complete_name": "ALLORO STEFANO",
                "nickname": "steve",
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "gender_type_id": 1,
                "year_guessed": false
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "first_name": "Stefano",
                "last_name": "Alloro",
                "complete_name": "ALLORO STEFANO",
                "nickname": "steve",
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "gender_type_id": 1,
                "year_guessed": false
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "first_name": "Stefano",
                "last_name": "Alloro",
                "complete_name": "ALLORO STEFANO",
                "nickname": "steve",
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "gender_type_id": 1,
                "year_guessed": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "first_name": "Stefano",
                "last_name": "Alloro",
                "complete_name": "ALLORO STEFANO",
                "nickname": "steve",
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "gender_type_id": 1,
                "year_guessed": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "first_name": "Stefano",
                "last_name": "Alloro",
                "complete_name": "ALLORO STEFANO",
                "nickname": "steve",
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "gender_type_id": 1,
                "year_guessed": false
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new Swimmer, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have generic **Admin** grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `complete_name` | string | **required**, complete name, as it appears from the public rankings (italian ordering: last name first) |
| `year_of_birth` | number | **required**, year of birth |
| `gender_type_id` | number | **required**, associated GenderType ID |
| | _id_ | _code: description_ |
| | 1 | `M`: male |
| | 2 | `F`: female |
| | 3 | `X`: unknown |
| `first_name` | string | first name(s): when middle names are present, these will be concatenated and stored here too |
| `last_name` | string | the family name portion of the complete name, when it is known |
| `nickname` | string | swimmer nickname |
| `associated_user_id` | number | associated User ID |
| `year_guessed` | boolean |`true` when year of birth has been deduced from other data  |


* * *


+ Attributes
    + complete_name (string, required) - complete name, as it appears from the public rankings
    + year_of_birth (number, required) - year of birth
    + gender_type_id (number, required) - associated GenderType ID
    + first_name (string, optional) - swimmer first name(s)
    + last_name (string, optional) - swimmer family name
    + nickname (string, optional) - swimmer nickname
    + associated_user_id (number, optional) - associated User ID
    + year_guessed (boolean, optional) - `true` when year of birth has been deduced from other data


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"complete_name": "ALLORO STEFANO", "gender_type_id": 1, \
                 "year_of_birth": 1969, "associated_user_id": 1, \
                 "nickname": "steve"}' \
            "<API_HOST:PORT>/api/v3/team_affiliation"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/team_affiliation',
            {
                "complete_name": "ALLORO STEFANO",
                "gender_type_id": 1,
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "nickname": "steve"
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "complete_name": "ALLORO STEFANO",
                "gender_type_id": 1,
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "nickname": "steve"
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "complete_name": "ALLORO STEFANO",
                "gender_type_id": 1,
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "nickname": "steve"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                "complete_name": "ALLORO STEFANO",
                "gender_type_id": 1,
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "nickname": "steve"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "complete_name": "ALLORO STEFANO",
                "gender_type_id": 1,
                "year_of_birth": 1969,
                "associated_user_id": 1,
                "nickname": "steve"
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# Swimmer list [/api/v3/swimmers{?page,per_page,name,first_name,last_name,complete_name,gender_type_id,year_of_birth,year_guessed,select2_format}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/swimmers?page=26&gender_type_id=1>; rel=\"last\", <http://localhost:3000/api/v3/swimmers?page=2&gender_type_id=1>; rel=\"next\""
            Total: 652
            Per-Page: 25
            Page: 1

    + Body

            [
                // Swimmer details 1
                {
                    "id": 4,
                    // [...]
                },

                // Swimmer details 2
                {
                    "id": 5,
                    // [...]
                },

                // [...]
            ]



## list [GET]

The list of Swimmers for the specified filtering parameters, returned as an array of JSON objects.
Returns exact matches for gender_type_id, year_of_birth, & year_guessed; supports partial matches
for the text fields, plus a FULLTEXT search by the generic 'name' parameter on all name-related fields.

Additional (optional) pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**


### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


### Support for Select2 bespoke format output

Use the parameter `select2_format` => `true` to enable the simplified output
format used for the Select2 HTML widget (a list of `{id: ..., text: ...}`
rows under a single `results` node; see https://select2.org/data-sources/formats).

When this is enabled, results are limited to a _maximum_ of **100** rows (pagination ignored).


* * *


+ Parameters
    + name: `Stefano` (string, optional) - generic FULLTEXT search on `first_name`, `last_name and `complete_name` values
    + first_name: `Stefano` (string, optional) - first name(s): when middle names are present, these will be concatenated and stored here too (partial match supported)
    + last_name: `Alloro` (string, optional) - the family name portion of the complete name, when it is known (partial match supported)
    + complete_name: `ALLORO STEFANO` (string, optional) - complete name, as it appears from the public rankings (italian ordering: last name first; partial match supported)
    + gender_type_id: 1 (number, optional) - associated GenderType ID
    + year_of_birth: 1969 (number, optional) - year of birth
    + year_guessed: false (boolean, optional) - `true` to search for data having only "guessed" year of birth values
    + select2_format: false (boolean, optional) - `true` to enable the bespoke Select2 simplified output format
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimmers?gender_type_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimmers',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { gender_type_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":4,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [Swimmer list][]


+ Request Select2 ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/swimmers?last_name=smith&select2_format=true"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/swimmers',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { last_name: 'smith', select2_format: true }
                }
            )
    => <RestClient::Response 200 "{\"results\":[{\"id\":4,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    + Body

            {
                "results": [
                    // Swimmer details 1
                    {
                        "id": 4,
                        "text": "Smith John (1971)"
                    },

                    // Swimmer details 2
                    {
                        "id": 5,
                        "text": "Smith Paul (1956)"
                    },

                    // [...]
                ]
            }


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
