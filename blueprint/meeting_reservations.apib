# Group MeetingReservations

## MeetingReservation details [/api/v3/meeting_reservation/{id}]

+ Model (application/json)

        {
            "id": 1,
            "meeting_id": 16102,
            "user_id": 2,
            "team_id": 1,
            "swimmer_id": 142,
            "badge_id": 60192,
            "notes": "",
            "not_coming": false,
            "confirmed": true,
            "payed": false,
            "swimmer_name": "ALLORO STEFANO",
            "swimmer_label": "ALLORO STEFANO (MAL, 1969)",
            "team_name": "Lake Ramiro Swimming Club ASD",
            "team_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
            "display_label": "MASTER CSI: 2° PROVA REGIONALE 2016/2017 ➡ CSI 2016/2017: ALLORO STEFANO (1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
            "short_label": "2° PROVA REGIONALE 2016/2017 ➡ ALLORO STEFANO (1969)",

            "meeting": {
                "id": 16102,
                "code": "csiprova2",
                "header_year": "2016/2017",
                "display_label": "MASTER CSI: 2° PROVA REGIONALE 2016/2017",
                "short_label": "2° PROVA REGIONALE 2016/2017",
                "edition_label": "2°"
            },

            "badge": {
                "id": 60192,
                "number": "04205745",
                "season_id": 161,
                "swimmer_id": 142,
                "team_id": 1,
                "category_type_id": 980,
                "entry_time_type_id": 3,
                "team_affiliation_id": 2754,
                "final_rank": null,
                "off_gogglecup": false,
                "fees_due": false,
                "badge_due": false,
                "relays_due": false,
                "display_label": "MASTER CSI 2016/2017: ALLORO STEFANO (MAL, 1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "CSI 2016/2017: ALLORO STEFANO (1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia"
            },
            "team": {
                "id": 1,
                "name": "Lake Ramiro Swimming Club ASD",
                "editable_name": "Lake Ramiro Swimming Club ASD",
                "address": "9038 Littel Lights",
                "zip": "028088",
                "phone_mobile": "265-752-0508 x022",
                "phone_number": "493-278-0409",
                "fax_number": null,
                "e_mail": "zenaida@example.net",
                "contact_name": "Dede Sipes",
                "notes": "Meatloaf rump pork ribeye shank sirloin venison tongue.",
                "name_variations": null,
                "city_id": 37,
                "home_page_url": "http://watsica.us",
                "display_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                "short_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
                "city_name": "Reggio nell Emilia, Reggio Emilia (IT)"
            },
            "swimmer": {
                "id": 142,
                "last_name": "ALLORO",
                "first_name": "STEFANO",
                "year_of_birth": 1969,
                "phone_mobile": null,
                "phone_number": null,
                "e_mail": null,
                "nickname": "",
                "associated_user_id": 1,
                "gender_type_id": 1,
                "complete_name": "ALLORO STEFANO",
                "year_guessed": false,
                "long_label": "ALLORO STEFANO (MAL, 1969)",
                "display_label": "ALLORO STEFANO (MAL, 1969)",
                "short_label": "ALLORO STEFANO (1969)",
                "associated_user_label": "steve (Stefano Alloro)"
            },

            "user": {
                "id": 2,
                "name": "leega",
                "description": "Marco Ligabue",
                "swimmer_id": 23,
                // ...All remaining user/operator fields...
                "short_label": "leega (Marco Ligabue)"
            },

            "season": {
                "id": 161,
                "description": "Circuito regionale Emilia master CSI 2016/2017",
                "begin_date": "2016-10-01",
                "end_date": "2017-09-30",
                "season_type_id": 2,
                "header_year": "2016/2017",
                "edition": 17,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "individual_rank": true,
                "badge_fee": "10.0",
                "display_label": "MASTER CSI 2016/2017",
                "short_label": "CSI 2016/2017"
            },
            "season_type": {
                "id": 2,
                "code": "MASCSI",
                "description": "CIRCUITO ITALIANO MASTER CSI",
                "short_name": "MASTER CSI",
                "federation_type_id": 2
            },
            "meeting_sessions": [
                {
                    "id": 1298,
                    "session_order": 1,
                    "scheduled_date": "2017-01-15",
                    "warm_up_time": "2000-01-01T14:15:00.000Z",
                    "begin_time": "2000-01-01T15:00:00.000Z",
                    "notes": "",
                    "meeting_id": 16102,
                    "swimming_pool_id": 6,
                    "description": "FINALI",
                    "autofilled": true,
                    "day_part_type_id": 2
                }
            ],

            "meeting_event_reservations": [
                {
                    "id": 3,
                    "meeting_id": 16102,
                    "team_id": 1,
                    "swimmer_id": 142,
                    "badge_id": 60192,
                    "meeting_event_id": 6701,
                    "minutes": 0,
                    "seconds": 0,
                    "hundredths": 0,
                    "accepted": false,
                    "meeting_reservation_id": 1,
                    "timing": "0'00\"00",
                    "swimmer_name": "ALLORO STEFANO",
                    "swimmer_label": "ALLORO STEFANO (MAL, 1969)",
                    "team_name": "Lake Ramiro Swimming Club ASD",
                    "team_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                    "display_label": "MASTER CSI: 2° PROVA REGIONALE 2016/2017 ➡ CSI 2016/2017: ALLORO STEFANO (1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
                    "short_label": "2° PROVA REGIONALE 2016/2017 ➡ ALLORO STEFANO (1969)",
                    "event_label": "200 IM",
                    "category_label": "(2016/2017) M45",
                    "category_code": "M45",
                    "gender_code": "M"
                },
                {
                    "id": 4,
                    "meeting_id": 16102,
                    "team_id": 1,
                    "swimmer_id": 142,
                    "badge_id": 60192,
                    "meeting_event_id": 6702,
                    "minutes": 1,
                    "seconds": 5,
                    "hundredths": 60,
                    "accepted": true,
                    "meeting_reservation_id": 1,
                    "timing": "1'05\"60",
                    "swimmer_name": "ALLORO STEFANO",
                    "swimmer_label": "ALLORO STEFANO (MAL, 1969)",
                    "team_name": "Lake Ramiro Swimming Club ASD",
                    "team_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                    "display_label": "MASTER CSI: 2° PROVA REGIONALE 2016/2017 ➡ CSI 2016/2017: ALLORO STEFANO (1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
                    "short_label": "2° PROVA REGIONALE 2016/2017 ➡ ALLORO STEFANO (1969)",
                    "event_label": "100 FS",
                    "category_label": "(2016/2017) M45",
                    "category_code": "M45",
                    "gender_code": "M"
                }
            ],
            "meeting_relay_reservations": [
                {
                    "id": 1,
                    "meeting_id": 16102,
                    "team_id": 1,
                    "swimmer_id": 142,
                    "badge_id": 60192,
                    "meeting_event_id": 6703,
                    "notes": null,
                    "accepted": true,
                    "meeting_reservation_id": 1,
                    "display_label": "MASTER CSI: 2° PROVA REGIONALE 2016/2017 ➡ CSI 2016/2017: ALLORO STEFANO (1969) ➡ Lake Ramiro Swimming Club ASD, Reggio nell Emilia",
                    "short_label": "2° PROVA REGIONALE 2016/2017 ➡ ALLORO STEFANO (1969)",
                    "swimmer_name": "ALLORO STEFANO",
                    "swimmer_label": "ALLORO STEFANO (MAL, 1969)",
                    "team_name": "Lake Ramiro Swimming Club ASD",
                    "team_label": "Lake Ramiro Swimming Club ASD, Reggio nell Emilia, Reggio Emilia (IT)",
                    "event_label": "4x100 FS",
                    "category_label": "(2016/2017) M45",
                    "category_code": "M45",
                    "gender_code": "M"
                }
            ]
        }


### find [GET]
The MeetingReservation instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `Team`
- `Badge`
- `Swimmer`
- `PoolType`
- `EventType`
- `CategoryType`
- `GenderType`

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 1 (number, required) - MeetingReservation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_reservation/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_reservation/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":1, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingReservation details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the MeetingReservation fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingReservation' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

| Master field | Sub-field | Data type |  description |
| --- | --- | --- | --- |
| `not_coming` | | boolean | `true` if the swimmer is not attending at all at this Meeting |
| `confirmed` | | boolean | `true` if the swimmer has already confirmed enrolling or presence at the Meeting |
| `notes` | | string | additional free notes |
| `events` | --- | array | array of event reservation parameters _(see below)_ |
| | `id` | integer | MeetingEventReservation ID (required whenever including any of the nested fields) |
| | `minutes` | integer | minutes for the entry timing |
| | `seconds` | integer | seconds for the entry timing |
| | `hundredths` | integer | hundredths for the entry timing |
| | `accepted` | boolean | `true` if the swimmer has accepted taking part in this event |
| | `notes` | string | additional free notes, specific for this event |
| `relays` | --- | array | array of relay reservation parameters _(see below)_ |
| | `id` | integer | MeetingRelayReservation ID (required whenever including any of the nested fields) |
| | `accepted` | boolean | `true` if the swimmer has accepted taking part in this relay event |
| | `notes` | string | additional free notes, specific for this relay |


* * *


+ Parameters
    + id: 1 (number, required) - MeetingReservation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{\"not_coming\":false,\"confirmed\":true,\"events\":[{\"id\":6699,\"accepted\":false,\"minutes\":2,\"seconds\":37,\"hundredths\":30}]}' \
            "<API_HOST:PORT>/api/v3/meeting_reservation/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_reservation/1',
                payload: {
                    not_coming: false,
                    confirmed: true,
                    events: [
                        {
                            id: 6699,
                            accepted: false,
                            minutes: 2,
                            seconds: 37,
                            hundredths: 30
                        }
                    ]
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "not_coming": false,
                "confirmed": true,
                "events": [
                    {
                        "id": 6699,
                        "accepted": false,
                        "minutes": 2,
                        "seconds": 37,
                        "hundredths": 30
                    }
                ]
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "not_coming": false,
                "confirmed": true,
                "events": [
                    {
                        "id": 6699,
                        "accepted": false,
                        "minutes": 2,
                        "seconds": 37,
                        "hundredths": 30
                    }
                ]
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "not_coming": false,
                "confirmed": true,
                "events": [
                    {
                        "id": 6699,
                        "accepted": false,
                        "minutes": 2,
                        "seconds": 37,
                        "hundredths": 30
                    }
                ]
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "not_coming": false,
                "confirmed": true,
                "events": [
                    {
                        "id": 6699,
                        "accepted": false,
                        "minutes": 2,
                        "seconds": 37,
                        "hundredths": 30
                    }
                ]
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "not_coming": false,
                "confirmed": true,
                "events": [
                    {
                        "id": 6699,
                        "accepted": false,
                        "minutes": 2,
                        "seconds": 37,
                        "hundredths": 30
                    }
                ]
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingReservation given the specified body parameters, together
with the list of children reservations needed for the associated events & relays
found for this Meeting definition.

(Thus, the Meeting needs to be already defined for the "reservation matrix" to result complete.)

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingReservation' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `badge_id` | integer | **required**, associated Badge ID |
| `meeting_id` | integer | **required**, associated Meeting ID |


* * *


+ Attributes
    + badge_id (number, required) - associated Badge ID
    + meeting_id (number, required) - associated Meeting ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"badge_id": 60192, "meeting_id": 16102 }'
            "<API_HOST:PORT>/api/v3/meeting_reservation"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_reservation',
            {
                'badge_id': 60192,
                'meeting_id': 16102
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'badge_id': 60192,
                'meeting_id': 16102
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'badge_id': 60192,
                'meeting_id': 16102
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'badge_id': 60192,
                'meeting_id': 16102
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'badge_id': 60192,
                'meeting_id': 16102
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows to delete a specific row with its associated details given its `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingReservation' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 1 (number, required) - MeetingReservation ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_reservation/1"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_reservation/1',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingReservation list [/api/v3/meeting_reservations{?page,per_page,meeting_id,team_id,swimmer_id,badge_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_reservations?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meeting_reservations?page=2&team_id=1>; rel=\"next\""
            Total: 46
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingReservation details 1
                {
                    "id": 1,
                    // [...]
                },

                // MeetingReservation details 2
                {
                    "id": 15,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of MeetingReservations associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `meeting_id`
- `team_id`
- `swimmer_id`
- `badge_id`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_id: 1 (number, optional) - associated Meeting ID
    + team_id: 1 (number, optional) - associated Team ID
    + swimmer_id: 142 (number, optional) - associated Swimmer ID
    + badge_id: 156 (number, optional) - associated Badge ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_reservations?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_reservations',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingReservation list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
