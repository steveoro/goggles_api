# Group MeetingIndividualResults

## MeetingIndividualResult details [/api/v3/meeting_individual_result/{id}]

+ Model (application/json)

        {
            "id": 151,
            "lock_version": 0,
            "rank": 7,
            "play_off": false,
            "out_of_race": false,
            "disqualified": false,
            "standard_points": "0.0",
            "meeting_points": "0.0",
            "minutes": 5,
            "seconds": 54,
            "hundredths": 10,
            "timing": "5'54\"10",
            "meeting_program_id": 2913,
            "swimmer_id": 1409,
            "team_id": 35,
            "badge_id": 4139,
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2014-10-19T00:00:00.000Z",
            "disqualification_code_type_id": null,
            "goggle_cup_points": "0.0",
            "reaction_time": "0.0",
            "team_points": "7.0",
            "team_affiliation_id": 197,
            "personal_best": false,
            "season_type_best": false,

            "meeting": {
                "id": 12101,
                "code": "csiprova1",
                "header_year": "2012/2013",
                "edition_label": "2012/2013"
            },

            "meeting_session":
                "id": 246,
                "session_order": 1,
                "scheduled_date": "2012-11-04"
            },

            "meeting_program": {
                "id": 2913,
                "event_order": 40,
                "category_type_id": 621,
                "gender_type_id": 1,
                "autofilled": false,
                "out_of_race": false,
                "begin_time": null,
                "meeting_event_id": 693,
                "pool_type_id": 1,
                "time_standard_id": null,

                "pool_type": {
                    "id": 1,
                    "code": "25",
                    "length_in_meters": 25,
                    "eventable": true,
                    "label": "25 M",
                    "long_label": "25 METERS",
                    "alt_label": "25 M"
                },
                "event_type": {
                    "id": 5,
                    "code": "400SL",
                    "length_in_meters": 400,
                    "relay": false,
                    "stroke_type_id": 1,
                    "style_order": 5,
                    "mixed_gender": false,
                    "partecipants": 1,
                    "phases": 1,
                    "phase_length_in_meters": 400,
                    "label": "400 FS",
                    "long_label": "400 FREESTYLE",
                    "alt_label": "400 FS"
                },
                "category_type": {
                    "id": 621,
                    "code": "M30",
                    "federation_code": "4",
                    "description": "MASTER 30",
                    "short_name": "M30",
                    "group_name": "MASTER",
                    "age_begin": 30,
                    "age_end": 34,
                    "relay": false,
                    "season_id": 121,
                    "out_of_race": false,
                    "undivided": false
                },

                "gender_type": {
                    "id": 1,
                    "code": "M",
                    "label": "MAL",
                    "long_label": "MALE",
                    "alt_label": "MALE"
                },
                "stroke_type": {
                    "id": 1,
                    "code": "SL",
                    "eventable": true,
                    "label": "FS",
                    "long_label": "FREESTYLE",
                    "alt_label": "CR"
                }
            },

            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },
            "event_type": {
                "id": 5,
                "code": "400SL",
                "length_in_meters": 400,
                "relay": false,
                "stroke_type_id": 1,
                "style_order": 5,
                "mixed_gender": false,
                "partecipants": 1,
                "phases": 1,
                "phase_length_in_meters": 400,
                "label": "400 FS",
                "long_label": "400 FREESTYLE",
                "alt_label": "400 FS"
            },
            "category_type": {
                "id": 621,
                "code": "M30",
                "federation_code": "4",
                "description": "MASTER 30",
                "short_name": "M30",
                "group_name": "MASTER",
                "age_begin": 30,
                "age_end": 34,
                "relay": false,
                "season_id": 121,
                "out_of_race": false,
                "undivided": false
            },
            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            },
            "stroke_type": {
                "id": 1,
                "code": "SL",
                "eventable": true,
                "label": "FS",
                "long_label": "FREESTYLE",
                "alt_label": "CR"
            },

            "laps": [], // (When available)

            "team_affiliation": {
                "id": 197,
                "number": "",
                "name": "Onda della Pietra",
                "compute_gogglecup": false,
                "team_id": 35,
                "season_id": 121,
                "autofilled": false
            },

            "swimmer": {
                "id": 1409,
                "complete_name": "Herman Anette 40753",
                "last_name": "Herman",
                "first_name": "Anette",
                "year_of_birth": 1957,
                "year_guessed": false
            },

            "disqualification_code_type": null
        }


### find [GET]
The MeetingIndividualResult instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `Meeting`
- `MeetingSession`
- `MeetingProgram`
- `TeamAffiliation`
- `Swimmer`
- `PoolType`
- `EventType`
- `CategoryType`
- `GenderType`

Some of the sub-entities (such as the EventType) are duplicated in the hierachy tree for ease of
reference.

:key: `Authorization` request header => valid JWT **required**

_Supports the `locale` override parameter ([`it`]|`en`)_


* * *


+ Parameters
    + id: 151 (number, required) - MeetingIndividualResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_individual_result/151"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_individual_result/151',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":151, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingIndividualResult details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the MeetingIndividualResult fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingIndividualResult' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_program_id` | integer | associated MeetingProgram ID |
| `team_affiliation_id` | integer | associated TeamAffiliation ID |
| `team_id` | integer | associated Team ID |
| `swimmer_id` | integer | associated Swimmer ID |
| `badge_id` | integer | associated Badge ID |
| `minutes` | integer | result time minutes |
| `seconds` | integer | result time seconds |
| `hundredths` | integer | result time hundredths of seconds |
| `play_off` | boolean | `true` if this result refers to a play-off at the end or after the end of a season (standard play otherwise) |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |
| `goggle_cup_points` | float | score computed for any GoggleCup associated to this specific team |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `team_points` | float | result score contributing to overall team scoring (may be standard or meeting-specific) |
| `out_of_race` | boolean | `true` if this result does not concur in the overall rankings or scores |
| `personal_best` | boolean | `true` to signal the latest personal best result for this swimmer |
| `season_type_best` | boolean | `true` to signal the latest seasonal best result for this swimmer |


* * *


+ Parameters
    + id: 151 (number, required) - MeetingIndividualResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"rank": 4, "minutes": 5, "seconds": 45, "hundredths": 60 }' \
            "<API_HOST:PORT>/api/v3/meeting_individual_result/151"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_individual_result/151',
                payload: {
                    rank: 4,
                    minutes: 5,
                    seconds: 45,
                    hundredths: 60
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundredths": 60
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundredths": 60
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundredths": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundredths": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundredths": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingIndividualResult, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingIndividualResult' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_program_id` | integer | **required**, associated MeetingProgram ID |
| `team_affiliation_id` | integer | **required**, associated TeamAffiliation ID |
| `team_id` | integer | **required**, associated Team ID |
| `swimmer_id` | integer | **required**, associated Swimmer ID |
| `badge_id` | integer | associated Badge ID |
| `minutes` | integer | result time minutes |
| `seconds` | integer | result time seconds |
| `hundredths` | integer | result time hundredths of seconds |
| `play_off` | boolean | `true` if this result refers to a play-off at the end or after the end of a season (standard play otherwise) |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |
| `goggle_cup_points` | float | score computed for any GoggleCup associated to this specific team |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `team_points` | float | result score contributing to overall team scoring (may be standard or meeting-specific) |
| `out_of_race` | boolean | `true` if this result does not concur in the overall rankings or scores |
| `personal_best` | boolean | `true` to signal the latest personal best result for this swimmer |
| `season_type_best` | boolean | `true` to signal the latest seasonal best result for this swimmer |


* * *


+ Attributes
    + meeting_program_id (number, required) - associated MeetingProgram ID
    + team_affiliation_id (number, required) - associated TeamAffiliation ID
    + team_id (number, required) - associated Team ID
    + swimmer_id (number, required) - associated Swimmer ID
    + badge_id (number, optional) - associated badge_id ID
    + minutes (number, optional)
    + seconds (number, optional)
    + hundredths (number, optional)
    + play_off (boolean, optional)
    + rank (number, optional)
    + standard_points (number, optional)
    + meeting_points (number, optional)
    + disqualified (boolean, optional)
    + disqualification_code_type_id (number, optional)
    + goggle_cup_points (number, optional)
    + reaction_time (number, optional)
    + team_points (number, optional)
    + out_of_race (boolean, optional)
    + personal_best (boolean, optional)
    + season_type_best (boolean, optional)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"meeting_program_id": 2913, "team_affiliation_id": 197, "team_id": 35, \
                 "swimmer_id": 142, "rank": 7, "minutes": 6, "seconds": 12, "hundredths": 10 \
                 "reaction_time": 0.85 }'
            "<API_HOST:PORT>/api/v3/meeting_individual_result"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_individual_result',
            {
                'meeting_program_id': 2913,
                'team_affiliation_id': 197,
                'team_id': 35,
                'swimmer_id': 142,
                'rank': 7,
                'minutes': 6,
                'seconds': 12,
                'hundredths': 10,
                'reaction_time': 0.85
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'meeting_program_id': 2913,
                'team_affiliation_id': 197,
                'team_id': 35,
                'swimmer_id': 142,
                'rank': 7,
                'minutes': 6,
                'seconds': 12,
                'hundredths': 10,
                'reaction_time': 0.85
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": <NEW_ROW_AS_JSON>
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'meeting_program_id': 2913,
                'team_affiliation_id': 197,
                'team_id': 35,
                'swimmer_id': 142,
                'rank': 7,
                'minutes': 6,
                'seconds': 12,
                'hundredths': 10,
                'reaction_time': 0.85
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'meeting_program_id': 2913,
                'team_affiliation_id': 197,
                'team_id': 35,
                'swimmer_id': 142,
                'rank': 7,
                'minutes': 6,
                'seconds': 12,
                'hundredths': 10,
                'reaction_time': 0.85
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'meeting_program_id': 2913,
                'team_affiliation_id': 197,
                'team_id': 35,
                'swimmer_id': 142,
                'rank': 7,
                'minutes': 6,
                'seconds': 12,
                'hundredths': 10,
                'reaction_time': 0.85
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingIndividualResult' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 759112 (number, required) - MeetingIndividualResult ID of the row that has to be deleted


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_individual_result/759112"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_individual_result/759112',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingIndividualResult list [/api/v3/meeting_individual_results{?page,per_page,meeting_program_id,team_affiliation_id,team_id,swimmer_id,badge_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_individual_results?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meeting_individual_results?page=2&team_id=1>; rel=\"next\""
            Total: 7860
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingIndividualResult details 1
                {
                    "id": 8,
                    // [...]
                },

                // MeetingIndividualResult details 2
                {
                    "id": 9,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of MeetingIndividualResults associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `meeting_program_id`
- `team_affiliation_id`
- `team_id`
- `swimmer_id`
- `badge_id`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_program_id: 1 (number, optional) - associated MeetingProgram ID
    + team_affiliation_id: 1 (number, optional) - associated TeamAffiliation ID
    + team_id: 1 (number, optional) - associated Team ID
    + swimmer_id: 142 (number, optional) - associated Swimmer ID
    + badge_id: 156 (number, optional) - associated Badge ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_individual_results?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_individual_results',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingIndividualResult list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
